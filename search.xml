<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript-Note</title>
    <url>/2024/05/11/JavaScript-Note/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3008acd4c61279aeae138c2afe5ad11b8eff34eb899f7d7123ec50a553271db2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>前端</category>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-note</title>
    <url>/2024/05/05/Linux-note/</url>
    <content><![CDATA[<p>Linux操作系统工作机制，基本命令，常用工具和常见配置。</p>
<span id="more"></span>
<p>[]中的内容均为可省略内容</p>
<h1 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h1><h2 id="终端及关机"><a href="#终端及关机" class="headerlink" title="终端及关机"></a>终端及关机</h2><p>打开shell,可见类似如下标识:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@localhost:/root/#</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>root      当前终端登录的用户名；</li>
<li>@         发音at,表示”在”</li>
<li>localhost 当前登录的主机名</li>
<li>&#x2F;root&#x2F;    当前终端工作目录</li>
<li>#        身份识别符，超级管理用户为 #，其他为 $</li>
</ul>
<p><strong>关机</strong><br>Linux中关机命令包括：<code>shutdown -h now</code>,<code>halt</code>,<code>init 0</code>,<br>其中shutdown命令是一个更加灵活的工具，可以用于定时关闭系统或发送警告消息给用户。</p>
<h2 id="文件与文件夹"><a href="#文件与文件夹" class="headerlink" title="文件与文件夹"></a>文件与文件夹</h2><p>Linux中包括进程等均为文件<br><strong>Linux系统文件及其用途</strong></p>
<ul>
<li>Bin 全称binary，二进制，存储二进制文件，可以被运行</li>
<li>Dev 存放外接设备，如其他光盘等，不能直接被使用，必须先挂载</li>
<li>Etc  存储配置文件</li>
<li>Home 除了root用户以外其他所有用户的家目录</li>
<li>Proc process进程，存储linux运行时的进程</li>
<li>Root root用户的家目录</li>
<li>Sbin super binary 存储只有拥有super权限的用户才能执行的二进制文件</li>
<li>Tmp 系统运行时产生的临时文件</li>
<li>Usr 存放用户自己安装的软件，类似windows的program files</li>
<li>var 存储程序&#x2F;系统的日志文件</li>
<li>Mnt 当外接设备需要挂载时就需要挂载在此目录</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl+c 强制停止<br>ctrl+d 退出或登出 不能用于退出vi&#x2F;vim<br>history 查看历史命令<br>！+命令前缀 执行上一个匹配此前缀的命令<br>ctrl+r+命令 查找上一个匹配的命令<br>ctrl+a 跳到命令开头<br>ctrl+e 跳到命令结尾<br>ctrl+键盘左键 左跳一个单词<br>ctrl+键盘右键 右跳一个单词<br>ctrl+l 清屏</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>linux中centos安装包的后缀名是rpm<br>ubuntu安装包的后缀名是apt</p>
<p><strong>centos yum命令</strong></p>
<p>语法：yum [-y] install|remove|search 软件名称<br>注释:需要联网及root权限<br><strong>ubuntu apt命令安装</strong><br>语法：apt [-y] install|remove|search 软件名称</p>
<h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制软件(服务)开关<br>语法: systemctl 选项 服务名称<br>选项：</p>
<ul>
<li>start 启动</li>
<li>stop 关闭</li>
<li>status 查看状态</li>
<li>enable 开启开机自启</li>
<li>disable 关闭开机自启<br>没有集成到systemctl的服务可以手动添加</li>
</ul>
<h2 id="日期与时间-date"><a href="#日期与时间-date" class="headerlink" title="日期与时间 date"></a>日期与时间 date</h2><p>1、date命令查看时间<br>语法：date [-d (给定字符串)] [+格式化字符串]<br>选项说明：</p>
<ul>
<li>-d 按照给定字符串显示日期，常用于日期计算，查看后天日期：date -d “+2 day” +%Y%M%d<br>格式化字符串：</li>
</ul>
<ul>
<li>%Y 年</li>
<li>%y 年份后两位数字</li>
<li>%M 月份</li>
<li>%d 日</li>
<li>%H 小时</li>
<li>%M 分钟</li>
<li>%S 秒</li>
<li>%s 自1970-01-01 00:00:00 UTC 到现在的秒数<br>2、修改时区<br>在root权限下，修改&#x2F;etc&#x2F;localtime文件：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -f /etc/localtime</span><br><span class="line">sudo ln -s /user/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
3、时间校准ntp程序<br>安装：<code> yum -y install ntp</code><br>设置开机自启：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"></span><br></pre></td></tr></table></figure>
ntpd启动后会自动联网校准，或手动校准：<br><code>sudo ntpdate -u ntp.aliyun.com</code>使用阿里云服务网站配合Ntpdate自动校准</li>
</ul>
<h2 id="IP地址和主机名"><a href="#IP地址和主机名" class="headerlink" title="IP地址和主机名"></a>IP地址和主机名</h2><p><strong>查看IP: ifconfig</strong><br>若无法使用命令，安装工具：yum -y install net-tools</p>
<p><strong>主机名：</strong><br>命令：hostname<br>修改主机名：sudo hostnamectl set-hostname 主机名</p>
<p><strong>域名解析</strong><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510154730.png"><br>如果想要不通过ip地址访问而是通过主机名访问可以自行配置&#x2F;etc&#x2F;hosts，方法如下：<br>以管理员身份打开上述文件夹，修改hosts文件，按如下格式在文件尾部添加 IP地址+空格+主机名 例如 111.111.111.111 computer</p>
<p>固定IP：略</p>
<h2 id="网络连接与下载ping-wget"><a href="#网络连接与下载ping-wget" class="headerlink" title="网络连接与下载ping wget"></a>网络连接与下载ping wget</h2><p><strong>ping</strong><br>功能：检查指定的网络服务器是否可联通<br>语法：ping [-c num] ip&#x2F;主机名<br>选项：-c 检查次数，不使用此选项将持续检查</p>
<p><strong>wget</strong><br>功能：非交互文件下载工具<br>语法：wget [-b] url<br>选项：-b 后台下载，会将日志写入当前工作目录下的wget-log文件</p>
<p><strong>curl</strong><br>需要先安装curl<br>语法：curl [-O] url<br>选项：-O 用于下载文件，当url是下载链接时</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p><strong>查看进程</strong><br>语法：ps [-e] [-f]<br>选项：</p>
<ul>
<li>-e显示全部进程</li>
<li>-f以完全格式化形式显示<br>说明：列出的全部信息中，从左到右分别是：</li>
</ul>
<ul>
<li>uid 进程所属用户id</li>
<li>pid 进程id</li>
<li>ppid 父进程id</li>
<li>c 进程cpu占用率</li>
<li>stime 进程启动时间</li>
<li>tty 启动此进程的终端序号，？表示非终端启动</li>
<li>time 进程占用cpu时间</li>
<li>cmd 进程对应名称或启动路径或启动命令<br>可以与grep结合输出特定进程信息：ps -ef | grep tail</li>
</ul>
<p><strong>关闭进程</strong><br>语法：kill [-9] 进程id<br>选项：-9 强制关闭进程，不使用此选项时会向进程发送关闭信号，但是否关闭取决于进程本身处理机制。</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>设备与外界通讯交流的出入口，分为物理端口和虚拟端口，一般指虚拟端口<br>ip地址锁定计算机，端口锁定程序<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510160157.png"></p>
<p><strong>端口查看</strong><br>需要安装nmap，具体见工具中其使用方法</p>
<h2 id="主机状态监控"><a href="#主机状态监控" class="headerlink" title="主机状态监控"></a>主机状态监控</h2><p><strong>top</strong><br>格式: top<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171029.png"><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171039.png"><br>top命令选项<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171050.png"><br>top的交互式运行<br><img src="/image.png" alt="alt text"><br>磁盘监控:</p>
<p><strong>iostat</strong><br>查看cpu 磁盘相关信息<br>语法：iostat [-x] [num1] [num2]<br>-x表示显示更多信息，num1为书信间隔，num2为刷新次数<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171325.png"><br><strong>sar网络监控</strong><br>sar命令十分复杂，仅介绍统计网络功能<br>语法：sar -n DEV num1 num2<br>-n 查看网络， DEV表示插卡吗网络接口 num1刷新间隔，不填仅查看一次，num2查看次数，不填默认无限</p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>执行env命令即可查看<br>当执行命令时，依次搜索path中的路径找到对应程序并执行</p>
<p>设置环境变量<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171416.png"><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171426.png"><br>永久生效要在对应文件中添加设置变量语句export 变量名&#x3D;变量值</p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171437.png"><br>在作上述更改后我们自己编写的程序可以在任何地方直接执行<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510171449.png"></p>
<p>每次打开终端都要source &#x2F;etc&#x2F;profile才能执行改程序，暂不清楚什么原因</p>
<h2 id="linux中上传和下载"><a href="#linux中上传和下载" class="headerlink" title="linux中上传和下载"></a>linux中上传和下载</h2><p>需要finalshall工具</p>
<p><a href="https://www.bilibili.com/video/BV1n84y1i7td?p=41&vd_source=20530c92c1be8bd70e37346e3a5c037a">下载地址</a></p>
<h2 id="压缩和解压（linux常用tar-gzip后缀名）"><a href="#压缩和解压（linux常用tar-gzip后缀名）" class="headerlink" title="压缩和解压（linux常用tar,gzip后缀名）"></a>压缩和解压（linux常用tar,gzip后缀名）</h2><p><strong>tar命令</strong><br>语法：tar [选项] 参数1 参数2 …<br>选项：</p>
<ul>
<li>-c 创建压缩文件</li>
<li>-v 显示解压缩过程，便于查看进度</li>
<li>-x 解压模式</li>
<li>-f 创建或解压的文件，必须放在选项末尾</li>
<li>-z gzip模式，必须放在开头，不使用就是tar模式,</li>
<li>-C 选择解压目的地<br>常用：<br>tar -cvf a.tar 1.txt 2.txt<br>tar -xvf test.tar -C &#x2F;home&#x2F;</li>
</ul>
<p><strong>zip命令</strong><br>语法：zip -r 参数1 参数2<br>-r 被压缩的包含文件夹时，需要此选项</p>
<p><strong>unzip解压</strong><br>语法 unzip [-d] 参数<br>-d 指定解压的位置，同tar的-C<br>同名内容会直接替换</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="速查"><a href="#速查" class="headerlink" title="速查"></a>速查</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>选项</th>
</tr>
</thead>
<tbody><tr>
<td>pwd</td>
<td>打印当前工作路径</td>
<td></td>
</tr>
<tr>
<td>cd [路径]</td>
<td>切换当前工作目录</td>
<td></td>
</tr>
<tr>
<td>ls [选项] [路径]</td>
<td>列出文件和目录</td>
<td>-l,-la,-lh</td>
</tr>
<tr>
<td>mkdir [选项] 路径1 [路径2]</td>
<td>创建新目录</td>
<td>-p</td>
</tr>
<tr>
<td>touch 路径1 [路径2]</td>
<td>创建新文件</td>
<td></td>
</tr>
<tr>
<td>cp [选项] 原路径 路径</td>
<td>复制并重命名文件或文件夹</td>
<td>-r</td>
</tr>
<tr>
<td>more 路径</td>
<td>查看文件内容</td>
<td></td>
</tr>
<tr>
<td>mv 原路径 路径</td>
<td>移动&#x2F;重命名文件&#x2F;文件夹</td>
<td></td>
</tr>
<tr>
<td>rm [选项] 路径</td>
<td>删除文件&#x2F;文件夹</td>
<td>-r</td>
</tr>
<tr>
<td>cat 路径</td>
<td>查看&#x2F;合并文件</td>
<td></td>
</tr>
<tr>
<td>df</td>
<td>查看磁盘空间</td>
<td>-h</td>
</tr>
<tr>
<td>free</td>
<td>查看内存使用情况</td>
<td>-m,-g,-k</td>
</tr>
<tr>
<td>find</td>
<td>查找文件</td>
<td>-name</td>
</tr>
<tr>
<td>which</td>
<td>定位执行过的命令操作的文件</td>
<td></td>
</tr>
<tr>
<td>echo</td>
<td>输出</td>
<td></td>
</tr>
<tr>
<td>chmod</td>
<td>修改文件&#x2F;文件夹权限</td>
<td></td>
</tr>
<tr>
<td>ln -s 路径 目的路径</td>
<td>创建软链接(快捷方式)</td>
<td></td>
</tr>
</tbody></table>
<h2 id="部分基础命令详解"><a href="#部分基础命令详解" class="headerlink" title="部分基础命令详解"></a>部分基础命令详解</h2><h3 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h3><p>ubuntu:uname -r</p>
<h3 id="Ls"><a href="#Ls" class="headerlink" title="Ls"></a>Ls</h3><p>语法：ls [选项] [路径]<br>功能：列出所有文件和文件目录<br>选项：</p>
<ul>
<li>-l 以详细列表的形式展示</li>
<li>-la 显示所有文件&#x2F;文件夹，包含隐藏文件&#x2F;文件夹</li>
<li>-lh 以列表形式并在显示文件大小时以高可读性的形式展示</li>
</ul>
<p>注释：列出结果中，蓝色为文件夹，黑色为文件，绿色表示拥有所有权限。隐藏文件一般以”.”开头</p>
<h3 id="Mkdir"><a href="#Mkdir" class="headerlink" title="Mkdir"></a>Mkdir</h3><p>语法：mkdir [选项] 路径1 [路径2] [路径3]<br>功能：创建新目录<br>选项：</p>
<ul>
<li>-p 一次创建多层不存在的目录<br>注释：可以一次创建多个目录，touch创建多个文件同此相似</li>
</ul>
<h3 id="Cp"><a href="#Cp" class="headerlink" title="Cp"></a>Cp</h3><p>语法：cp [选项] 原路径 路径<br>功能：复制文件或文件夹到指定位置同时可以重命名<br>选项：</p>
<ul>
<li>-r 递归复制，在复制文件夹时必须使用此选项<br>注释：复制时可同时重命名</li>
</ul>
<h3 id="Rm"><a href="#Rm" class="headerlink" title="Rm"></a>Rm</h3><p>功能：删除文件&#x2F;文件夹<br>语法：rm [选项] 路径<br>选项：</p>
<ul>
<li>-r 递归删除，删除文件夹及其中文件</li>
<li>-f 强制删除<br>注释：* 通配符，如a.txt,b.txt可表示为*.txt</li>
</ul>
<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向 &gt;,&gt;&gt;"></a>输出重定向 &gt;,&gt;&gt;</h3><p>语法：正常执行的指令 &gt;&#x2F;&gt;&gt; 文件的路径<br>注释：可以将命令的执行结果保存到文件中，或是输出一些数据到文件中。<br>示例: ls -la &gt; ls.txt</p>
<h3 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h3><p>功能：查看&#x2F;合并文件<br>语法：</p>
<ol>
<li>cat 路径</li>
<li>cat 待合并文件路径1 待合并文件路径2 … &gt; 合并之后的文件路径<br>注释：<br>合成后的文件必须不是需要合并的文件名</li>
</ol>
<h3 id="查找-find"><a href="#查找-find" class="headerlink" title="查找 find"></a>查找 find</h3><p>语法：find 起始路径 -name “被查找文件名”</p>
<h3 id="管道符-、grep、wc"><a href="#管道符-、grep、wc" class="headerlink" title="管道符 |、grep、wc"></a>管道符 |、grep、wc</h3><p><strong>grep</strong><br>语法：grep [-n] 关键字 文件路径<br>功能：通过关键字过滤文件行<br>选项：</p>
<ul>
<li>-n 在结果中显示匹配行的行号<br>注释：会输出对应行，文件路径要精确到文件名</li>
</ul>
<p><strong>wc</strong><br>语法：wc [-c -m -l -w] 文件路径<br>功能：统计文件行数单词数量等<br>选项：</p>
<ul>
<li>-c 统计bytes的数量</li>
<li>-m 统计字符数量</li>
<li>-l 统计行数</li>
<li>-w 统计单词数量<br>注释：不带选项会输出 行数 单词数 字节数</li>
</ul>
<p><strong>管道符|</strong><br>语法：示例： cat text.txt | grep a<br>功能：将管道符左边命令的结果作为右边命令的输入<br>注释：左边的命令必须要有输出，右边必须要有输入</p>
<h3 id="echo、反引号、tail、重定向符"><a href="#echo、反引号、tail、重定向符" class="headerlink" title="echo、反引号、tail、重定向符"></a>echo、反引号、tail、重定向符</h3><p><strong>echo</strong><br>语法：echo 输出的内容<br>功能：在命令行内输出指定内容<br>注释：内容如果带有空格或\等特殊符号，需要用双引号包裹</p>
<p>**反引号`**<br>语法：`命令`<br>功能：将其内的内容作为命令执行而非普通字符</p>
<p><strong>重定向符</strong> &gt; &gt;&gt;<br>语法：echo “test” &gt; test.txt、ls &gt; test.txt两种<br>功能：<br>&gt; 将左侧命令的结果覆盖写入符号右侧指定的文件中<br>&gt;&gt; 将左侧命令的结果覆盖写入符号右侧指定的文件中</p>
<p><strong>tail</strong><br>语法：tail [-f&#x2F;-num] 路径<br>功能：查看文件尾部内容，跟踪文件的最新更改<br>选项:</p>
<ul>
<li>-f 表示持续跟踪</li>
<li>-num 查看尾部n行，无此默认10行</li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="vi-vim-文本编辑器"><a href="#vi-vim-文本编辑器" class="headerlink" title="vi vim 文本编辑器"></a>vi vim 文本编辑器</h2><p>安装：<br>ubuntu: sudo apt-get install vim<br>语法：vim 文件路径<br>功能：打开一个文件(不存在则创建)<br>使用：<br>开始时进入命令模式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>在当前光标位置进入输入模式</td>
</tr>
<tr>
<td>a</td>
<td>在当前光标位置进入输入模式</td>
</tr>
<tr>
<td>I</td>
<td>在当前行的开头进入输入模式</td>
</tr>
<tr>
<td>A</td>
<td>在当前行的结尾进入输入模式</td>
</tr>
<tr>
<td>o</td>
<td>在当前光标下一行进入输入模式</td>
</tr>
<tr>
<td>O</td>
<td>在当前光标上一行进入输入模式</td>
</tr>
<tr>
<td>esc</td>
<td>任何情况下输入esc回到命令模式</td>
</tr>
<tr>
<td>键盘上;k</td>
<td>向上移动光标</td>
</tr>
<tr>
<td>键盘下;j</td>
<td>向下移动光标</td>
</tr>
<tr>
<td>键盘左;h</td>
<td>向左移动光标</td>
</tr>
<tr>
<td>键盘右;l</td>
<td>向右移动光标</td>
</tr>
<tr>
<td>0</td>
<td>移动光标到当前行开头</td>
</tr>
<tr>
<td>$</td>
<td>移动光标到当前行结尾</td>
</tr>
<tr>
<td>PgUp</td>
<td>向上翻页</td>
</tr>
<tr>
<td>PgDn</td>
<td>向下翻页</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>进入搜索模式</td>
</tr>
<tr>
<td>n</td>
<td>向下继续搜索</td>
</tr>
<tr>
<td>N</td>
<td>向上继续搜索</td>
</tr>
<tr>
<td>底线命令模式：</td>
<td></td>
</tr>
<tr>
<td>命令</td>
<td>描述</td>
</tr>
<tr>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>:wq</td>
<td>保存退出</td>
</tr>
<tr>
<td>:q</td>
<td>不保存退出</td>
</tr>
<tr>
<td>:q!</td>
<td>强制退出</td>
</tr>
<tr>
<td>:w</td>
<td>仅保存</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set paste</td>
<td>设置粘贴模式</td>
</tr>
</tbody></table>
<h2 id="Make和makefile"><a href="#Make和makefile" class="headerlink" title="Make和makefile"></a>Make和makefile</h2><p><a href="https://www.gnu.org/software/make/manual/html_node/Rules.html">官方手册</a></p>
<p>Makefile 中写的仍然是命令，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目标文件：依赖文件  </span><br><span class="line">\&lt; TAB\&gt;编译命令 </span><br></pre></td></tr></table></figure>

<p>依赖文件即源文件,目标文件也可以是目标，依赖文件必须在本目录下，所以如下格式：</p>
<p><code>Clean:</code></p>
<p>它的编译命令必须是 make clean 如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -C /lib/modules/\$(shell uname -r)/build M=\$(PWD) clean</span><br></pre></td></tr></table></figure>
<p>当本目录下有一个名为clean的文件时，将无法执行，需要在上一行加上.PHONY:避免重名冲突变量设置同在shell中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义： OBJ = add</span><br><span class="line">取值： \$(OBJ)</span><br></pre></td></tr></table></figure>
<p>预定义变量</p>
<ul>
<li>AR 库文件维护程序名称，默认为ar</li>
<li>AS 汇编程序名称，默认为as</li>
<li>CC C编译器名称 默认为cc</li>
<li>CPP C预编译器名称，默认为$(CC) -E</li>
<li>CXX C++编译器名称，默认为g++</li>
<li>FC FORTRAN编译器名称，默认为f77</li>
<li>RM 文件删除程序名称，默认为rm -f<br>直接调用CC这个变量:<code>$(CC) add.o -o add</code><br><code>![](https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240509220940.png &quot;自动变量&quot;)</code></li>
</ul>
<p><strong>反斜杠（\）</strong>是换行符make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件，由此可以只写.h依赖文件（.c和.o同名）<br>+&#x3D;是追加</p>
<p><a href="https://blog.csdn.net/darmao/article/details/81077055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169954666316800186516976%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169954666316800186516976&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81077055-null-null.142%5Ev96%5Epc_search_result_base2&utm_term=makefile%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99&spm=1018.2226.3001.4187">参考文档</a></p>
<p><code>![](https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240509220859.png)</code><br>综述：</p>
<p>1、规则格式： 目标文件: 依赖文件1 依赖文件2<br>2、命令格式： TAB 命令 （命令必须以Tab键开始！！！）<br>3、以#开头为注释，会被忽略；\是换行符，便于观察，视为同一行；@符标识的命令不会打印但仍会执行；-标识需要忽略错误的命令，即被标识的命令即使错误执行也不会退出而是继续执行其他指令；<br>4、make 可以自己判断依赖，每个规则在满足依赖文件的前提下执行命令，一个规则下可有多条命令。可以一个Makefile的规则一起make，也可以通过make 规则目标文件来开始特定规则。<br>5、特殊的clean规则，执行时必须使用make clean命令，因为它没有依赖文件<br>6、标识符.PHONY: 当有一个文件名为clean时，makeclean无法执行上一条规则，可以使用此标识符，clean将不在被视为文件而是伪目标，install也常被表示为伪目标<br>7、make针对每条命令，都会创建一个独立的Shell环境，类似cd ..这样的命令，并不会影响当前目录，但当将它们以;分隔而不是换行，即可实现。<br>8、隐式规则：当遇到一个xyz.o时，没有找到对应规则，自动应用：<br>9、变量定义：变量名&#x3D;值 或 变量名 :&#x3D;值<br>变量引用：$(变量名)<br>10、自动生成依赖列表（针对c编译）<br>11、可以用$(CC)代替CC，它是make内置变量，可以修改默认值指向gcc<br>12、$@、$&lt;、$^自动变量，前者标识目标文件,中间表示第一个依赖项，后者表示所有依赖文件，有歧义时必须使用 ()<br>13、模式规则，自动按需要匹配，匹配则创建规则<br>14、-MM参数，gcc参数，解决.h文件更新而不会重新编译的问题</p>
<h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><p><code>![](https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240509222945.png)</code></p>
<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p><code>![](https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240509223023.png)</code></p>
<h1 id="用户与权限"><a href="#用户与权限" class="headerlink" title="用户与权限"></a>用户与权限</h1><h2 id="root用户和普通用户"><a href="#root用户和普通用户" class="headerlink" title="root用户和普通用户"></a>root用户和普通用户</h2><p>root拥有最大的系统操作权限，普通用户一般只在HOME目录下是不受限的，其他目录只有只读和执行的权限</p>
<h2 id="su-sudo"><a href="#su-sudo" class="headerlink" title="su sudo"></a>su sudo</h2><p><strong>su</strong><br>语法：su [-] 用户名<br>功能：切换用户<br>注释：-符号可选，表示是否在切换后加载环境变量，建议带上,省略用户名时切换到root。</p>
<p><strong>sudo</strong><br>语法：sudo 其他命令<br>功能：为普通用户配置sudo认证<br>注释：<br>修改密码：<br>sudo passwd 用户名</p>
<h2 id="更改用户名"><a href="#更改用户名" class="headerlink" title="更改用户名"></a>更改用户名</h2><p>需要在root用户下执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /home/原用户 /home/新用户名</span><br><span class="line">sed -i &#x27;s/原用户名/新用户名/g&#x27; /etc/shadow</span><br><span class="line">sed -i &#x27;s/原用户名/新用户名/g&#x27; /etc/passwd</span><br><span class="line">sed -i &#x27;s/原用户名/新用户名/g&#x27; /etc/group</span><br></pre></td></tr></table></figure>

<h2 id="用户与用户组管理"><a href="#用户与用户组管理" class="headerlink" title="用户与用户组管理"></a>用户与用户组管理</h2><p>1、用户组的创建和删除（必须在root下执行）<br>创建：groupadd 用户组名<br>删除：groupdel 用户组名<br>修改：groupmod 选项 用户组名<br>选项：</p>
<ul>
<li>-g gid，为用户组指定新的组标识号</li>
<li>-n 新用户组，将用户组的名字改为新名字，修改用户组的名称和gid</li>
</ul>
<p>添加删除成员：gpasswd [选项][用户][组]</p>
<ul>
<li>-r 删除组密码</li>
<li>-a——把用户加入组</li>
<li>-d——把用户从组中删除。</li>
<li>-M——可同时添加多个用户</li>
<li>-A——给组指派管理员。</li>
</ul>
<p>查询用户和组信息：<br>查询用户信息：id 用户名<br>查询用户所属组信息：groups 用户名</p>
<p>2、用户的创建，删除和查看、修改</p>
<p>创建：useradd [-g-d] 用户名<br>注： -d 指定用户home路径，不指定默认&#x2F;home&#x2F;用户名；<br>-g 指定用户所在的组 不指定创建同名组并自动加入，指定-g需要组已经存在</p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510165923.png"><br>删除：userdel [-r] 用户名 注：有-r删除用户的home目录，没有就保留<br>查看：id [用户名] 注：没有用户名就查看自身<br>修改用户所在组：usermod -aG 用户组 用户名</p>
<p>3、查看当前系统有哪些用户</p>
<p>getent passwd 不需要root也能执行<br>getent groop 查看系统全部组信息<br>4、groupmems</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>ls -l查看<br>r:读权限<br>w:写权限<br>x:执行权限<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510170120.png"><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510170133.png"><br>s权限：以属主权限执行而非以执行者权限执行</p>
<h2 id="修改权限和所属关系"><a href="#修改权限和所属关系" class="headerlink" title="修改权限和所属关系"></a>修改权限和所属关系</h2><p><strong>chmod</strong><br>语法：chmod [-R ] 权限 文件或文件夹<br>功能：修改文件，文件夹的权限信息<br>注释：只有在root用户或所属用户才能修改<br>权限可用三位数字表示，第一位表示用户权限，第二位表示用户组权限，第三位表示其他用户权限，数字表示中，r记为4，w记为2，x记为1，拥有多个权限即数字和，如5为rx,6为rw。</p>
<p><strong>chown</strong><br>修改文件，文件夹所属用户和用户组<br>语法：chown [-R] [用户][:][用户组] 文件&#x2F;文件夹<br>注释：只有在root用户或所属用户才能修改<br>示例 chown root a.txt将a.txt所属用户改为root</p>
<h2 id="umask命令"><a href="#umask命令" class="headerlink" title="umask命令"></a>umask命令</h2><p>umask 是一个用于设置文件创建时默认权限掩码的命令。在 Linux&#x2F;Unix 系统中，文件和目录有默认的权限值，然后umask 通过减去权限来影响这些默认值。<br>查看当前 umask 设置： umask<br>设置新的 umask: umask <strong>掩码</strong><br>umask使用八进制数表示的掩码来指定要从默认权限中移除的权限。常见的权限值包括：</p>
<p><strong>4</strong>：读权限<br><strong>2</strong>：写权限<br><strong>1</strong>：执行权限</p>
<p>例如，如果当前 umask 是022，那么新创建的文件默认权限会减去,W（写权限）给组和其他用户。<br>请注意，umask不会影响已经存在的文件或目录的权限，它只会影响新创建的文件或目录的默认权限。</p>
<h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="网站与服务器"><a href="#网站与服务器" class="headerlink" title="网站与服务器"></a>网站与服务器</h2><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240510165141.png"></p>
<h2 id="VMware使用"><a href="#VMware使用" class="headerlink" title="VMware使用"></a>VMware使用</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>克隆后的信息同原来的完全相同</p>
<h3 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h3><p>共享文件夹中，主机设置为共享的文件夹名字不会显示在客户机中，而是其中的文件和文件夹显示在客户机的&#x2F;mnt&#x2F;hgfs中<br>使用命令vmware-hgfsclient查看文件夹名称share_dir_name<br>使用命令sudo vmhgfs-fuse .host:&#x2F; &#x2F;mnt&#x2F;hgfs -o allow_other挂载<br>编辑文件&#x2F;etc&#x2F;fstab&#x2F;实现永久挂载：<br>.host:&#x2F;share_dir_name &#x2F;mnt&#x2F;hgfs fuse.vmhgfs-fuse allow_other 0 0</p>
<h1 id="Linux安全"><a href="#Linux安全" class="headerlink" title="Linux安全"></a>Linux安全</h1><h2 id="Suid提权"><a href="#Suid提权" class="headerlink" title="Suid提权"></a>Suid提权</h2><p><code>![](https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240509223134.png)</code><br>编译执行课件suid部分提权到root shell的例子，分析其原理</p>
<p>原理解释：<br>这段代码的提权原理是利用了程序的 Set User ID（SUID）特性。当一个可执行文件具有SUID位时，它在执行时以文件所有者的权限而不是执行者的身份运行。在这个例子中，shell 程序的文件所有者被设置为 root，并且添加了SUID位，因此当非root用户执行该程序时，程序以root用户的权限运行。<br>在代码中<br><code>setuid(0);</code><br>这一行代码调用了 setuid 函数，将有效用户ID设置为0。在Unix&#x2F;Linux系统中，用户ID为0的用户是超级用户（root）。因此，这个程序尝试将自身的权限提升为root。<br><code>execve(name[0], name, 0x0);</code><br>这一行使用 execve 函数执行一个新的程序，即Shell (&#x2F;bin&#x2F;sh)。由于在前一步中已经将有效用户ID设置为0，所以 execve 将以root用户的权限执行Shell。<br><code>sudo chmod +s shell</code><br>此命令将SUID位添加到 shell 文件上，使得在执行该文件时，它将以文件所有者（root）的身份运行。因此，当非root用户执行 shell 程序时，由于SUID特性，该程序将在执行时拥有root权限，提供了一个简单的方式来获得root shell。</p>
]]></content>
      <categories>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown-note</title>
    <url>/2024/05/03/Markdown-note/</url>
    <content><![CDATA[<h2 id="Markdown语法参考：Markdown官方文档注意每个符号后都需要一个空格引用、列表后应当空一行在添加非引用、列表的内容-以提高兼容"><a href="#Markdown语法参考：Markdown官方文档注意每个符号后都需要一个空格引用、列表后应当空一行在添加非引用、列表的内容-以提高兼容" class="headerlink" title="Markdown语法参考：Markdown官方文档注意每个符号后都需要一个空格引用、列表后应当空一行在添加非引用、列表的内容,以提高兼容"></a>Markdown语法<br><span id="more"></span><br>参考：<a href="https://markdown.com.cn/basic-syntax/">Markdown官方文档</a><br><strong>注意</strong><br>每个符号后都需要一个空格<br>引用、列表后应当空一行在添加非引用、列表的内容,以提高兼容</h2><h2 id="转移字符"><a href="#转移字符" class="headerlink" title="转移字符"></a>转移字符</h2><p>显示原本用于格式化 Markdown 文档的字符，需要在字符前面添加反斜杠字符 \。<br>包括 \ ` * _ { } [ ] ( ) # + - . ! |<br>&amp;和&lt;在html中必须用<code>&amp;lt;</code> 和 <code>&amp;amp</code>替代，但markdown语法可以不用，在 Markdown 的块级元素和内联元素中， &lt; 和 &amp; 两个符号都会被自动转换成 HTML 实体</p>
<h2 id="标题（-）"><a href="#标题（-）" class="headerlink" title="标题（#）"></a>标题（#）</h2><p>最多可以添加6级标题 </p>
<blockquote>
<p>   #            一级标题<br>   ##          二级标题<br>   ###        三级标题<br>   ####      四级标题<br>   #####    五级标题<br>   ######  六级标题</p>
</blockquote>
<p>或使用html符号 <code>&lt;h1\~6&gt;; &lt;/h1\~6&gt;</code>;</p>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>使用空白行将一行或多行文本进行分隔。 </p>
<p>或使用html符号 <code>&lt;p&gt; &lt;/p&gt;</code>;</p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行;<br>或使用html符号 <code>&lt;br&gt;</code> </p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>Markdown本身不支持空格，但可以使用html语法<br>格式：<br>    &ensp;：输入一个空格<br>    &nbsp;：输入一个空格<br>    &emsp;：输入两个空格</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p><strong>粗体：</strong><br>单词或短语的前后各添加两个星号 <code>**</code><br><strong>**强调**</strong><br>或使用html语法 <code>&lt;strong&gt; &lt;/strong&gt;</code></p>
<p><strong>斜体：</strong><br>单词或短语前后添加一个星号 <code>*</code><br><em>*斜体*</em><br>或使用html语法 <code>&lt;em&gt; &lt;/em&gt;</code></p>
<p><strong>斜粗体</strong><br>单词或短语前后添加三个星号 <code>***</code><br><em><strong>***斜粗体***</strong></em><br>或使用html语法 <code>&lt;em&gt; &lt;/em&gt;</code></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><strong>单段</strong><br>要创建块引用，请在段落前添加一个 <code>&gt;</code> 符号。<br><strong>多段</strong><br>包含多个段落。为段落之间的空白行添加一个 &gt; 符号<br><strong>嵌套</strong><br>块引用可以嵌套。在要嵌套的段落前添加一个 &gt; 符号<br>块引用也可以包含其他Markdown格式元素</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>有序列表</strong><br>在每个列表项前添加数字并紧跟一个英文句点，数字不需要按数学顺序排列，Markdown会自动按原顺序排列：</p>
<ol>
<li>第一个</li>
<li></li>
</ol>
<p>或使用html语法 <code>&lt;ol&gt; &lt;li&gt;第一个 &lt;/li&gt;&lt;li&gt;第二个 &lt;/li&gt;  &lt;ol&gt;</code></p>
<p><strong>无序列表</strong></p>
<p>在每个列表项前面添加<code>破折号 (-)、星号 (*) 或加号 (+)</code>。缩进一个或多个列表项（一个列表项两个空格）可创建嵌套列表。建议同一级列表使用相同的符号</p>
<blockquote>
<ul>
<li>a     <ul>
<li>b       <ul>
<li>c</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>或使用html语法 <code>&lt;ul&gt; &lt;li&gt;a &lt;/li&gt;&lt;li&gt;b &lt;/li&gt;&lt;/ul&gt;</code></p>
<p><strong>列表中嵌套其他元素</strong><br>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符  </p>
<ul>
<li>列表<blockquote>
<p>缩进后其他元素如引用块</p>
</blockquote>
</li>
<li>列表</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>将单词或短语包裹在反引号 <strong>(`)** 中。但要创建**代码块**，应当将代码块前后使用连续三个 **```</strong> 包裹，并每行代码至少空一个tab符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码</span><br><span class="line">代码</span><br></pre></td></tr></table></figure>
<p>或使用html语法 <code>&lt;code&gt; &lt;/code&gt;</code></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在单独一行使用三个及以上的  <code>***或---或下划线___</code></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code><br>超链接title是鼠标悬停时显示的标题<br>使用尖括号可以把URL或者email地址变成可点击的链接，强调链接, 在链接语法前后增加星号。要将链接表示为代码，在方括号中添加反引号</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。<br><code>![图片alt](图片链接 &quot;图片title&quot;)</code><br>或使用html<code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;&quot;&gt;</code></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-CSS-Note</title>
    <url>/2024/05/11/HTML-CSS-Note/</url>
    <content><![CDATA[<p>HTML 和 CSS 语法及其示例</p>
<span id="more"></span>

<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><a href="https://www.bilibili.com/video/BV1kM4y127Li/?spm_id_from=333.976.0.0">视频教学</a></p>
<h2 id="chome调试工具的使用"><a href="#chome调试工具的使用" class="headerlink" title="chome调试工具的使用"></a>chome调试工具的使用</h2><p>右键 检查<br>调试后要更改源码才能保存<br>若出现删除线，可能是以下情况：<br>1、被注释<br>2、被覆盖<br>3、自己将前面的勾取消了<br>若出现三角形，表明语法存在问题，将鼠标停留在出错位置会显示具体原因<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515174431.png"></p>
<h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><p><strong>web标准构成</strong></p>
<table>
<thead>
<tr>
<th>构成</th>
<th>语言</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>HTML</td>
<td>页面元素的内容</td>
</tr>
<tr>
<td>表现</td>
<td>CSS</td>
<td>网页元素的外观和位置等页面样式，如颜色大小</td>
</tr>
<tr>
<td>行为</td>
<td>JavaScript</td>
<td>网页模型的定义和页面交互</td>
</tr>
</tbody></table>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="基本认识（结构、注释、标签）"><a href="#基本认识（结构、注释、标签）" class="headerlink" title="基本认识（结构、注释、标签）"></a>基本认识（结构、注释、标签）</h3><p>HTML结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;网页标题&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        网页主体</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>注释：<br>&lt;!—内为注释内容 –&gt;<br>或者使用快捷键：<br>ctrl+k+c,取消ctrl+k+u</p>
<p>标签结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单标签：&lt;br&gt;</span><br><span class="line">双标签：&lt;strong class = &quot;one&quot; &gt; 粗体 &lt;/strong&gt;   </span><br><span class="line">       开始标签 属性名   属性值  内容 结束标签</span><br></pre></td></tr></table></figure>
<p>&lt;&gt;内为标签名，标签可以存在多个属性，均需要写在开始标签内部，之间以空格分开，没有顺序要求</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="文字排版标签-h-p-hr-br"><a href="#文字排版标签-h-p-hr-br" class="headerlink" title="文字排版标签(h,p,hr,br)"></a>文字排版标签(h,p,hr,br)</h3><p><strong>标题标签</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;一级标题&lt;/h1&gt;&lt;h4&gt;四级标题&lt;/h4&gt;</span><br><span class="line">&lt;h2&gt;二级标题&lt;/h2&gt;&lt;h5&gt;五级标题&lt;/h5&gt;</span><br><span class="line">&lt;h3&gt;三级标题&lt;/h3&gt;&lt;h6&gt;六级标题&lt;/h6&gt;</span><br></pre></td></tr></table></figure>
<p>语义：1-6级标题，重要程度依次递减<br>特点：文字自动加粗，且h6-h1文字大小逐渐变大，独占一行，均大于普通文字。</p>
<p><strong>段落标签</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;P&gt;一段文字&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>语义：段落，用于分段显示<br>特点：段落间存在空隙，独占一行</p>
<p><strong>换行标签</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure>
<p>语义：换行，用于强制换行<br>特点：单标签，让文字强制换行</p>
<p><strong>水平线标签</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure>
<p>语义：用于主题的分隔转换，在页面显示一条水平线</p>
<p><strong>文本格式化标签</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加粗：&lt;b&gt;&lt;/b&gt; 或 &lt;strong&gt;&lt;/strong&gt;</span><br><span class="line">倾斜：&lt;u&gt;&lt;/u&gt; 或 &lt;ins&gt;&lt;/ins&gt;</span><br><span class="line">下划线：&lt;i&gt;&lt;/i&gt; 或 &lt;em&gt;&lt;/em&gt;</span><br><span class="line">删除线：&lt;s&gt;&lt;/s&gt; 或 &lt;del&gt;&lt;/del&gt;</span><br></pre></td></tr></table></figure>
<p>语义：突出重要性的强调语境</p>
<h3 id="图片标签-img"><a href="#图片标签-img" class="headerlink" title="图片标签(img)"></a>图片标签(img)</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src = &quot;&quot; alt = &quot;&quot;&gt;</span><br></pre></td></tr></table></figure>
<br>
特点：单标签，需要展示对应效果时需要借助标签的属性设置

<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>目标图片路径</td>
<td>可以使用相对&#x2F;绝对路径</td>
</tr>
<tr>
<td>alt</td>
<td>替换文本</td>
<td>仅在图片加载失败时显示的文本</td>
</tr>
<tr>
<td>title</td>
<td>提示文本</td>
<td>鼠标悬停时显示的文本，也可用于其他标签</td>
</tr>
<tr>
<td>width</td>
<td>宽度</td>
<td>仅设置宽或高度，另一个自动等比缩放</td>
</tr>
<tr>
<td>height</td>
<td>高度</td>
<td>宽高均设置，可能导致图片变形</td>
</tr>
</tbody></table>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>绝对路径：指目录下的绝对位置，可直达目标位置，通常从盘符开始或完整网络地址,如</p>
<ul>
<li>D:\test\test.png</li>
<li><a href="https://www.test.com/test/test1/a.jpg">https://www.test.com/test/test1/a.jpg</a></li>
</ul>
<p>网络地址：右键-复制图片链接</p>
<p>相对路径：<br>&#96;&#96;同级目录下<br><code>子目录名</code>子目录下，可有多层子目录<br><code>..\</code>上级目录下，也可有多层</p>
<h3 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签(audio)"></a>音频标签(audio)</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio src = &quot;&quot; controls&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<p>语义：在页面中插入音频，目前支持三种格式(MP3 Wav Ogg), </p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>目标音频路径</td>
<td>可以使用相对&#x2F;绝对路径</td>
</tr>
<tr>
<td>controls</td>
<td>无</td>
<td>显示播放控件</td>
</tr>
<tr>
<td>autoplay</td>
<td>无</td>
<td>自动播放(部分浏览器不支持)</td>
</tr>
<tr>
<td>loop</td>
<td>无</td>
<td>自动循环播放</td>
</tr>
</tbody></table>
<h3 id="视频标签-video"><a href="#视频标签-video" class="headerlink" title="视频标签(video)"></a>视频标签(video)</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src = &quot;&quot; controls&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>
<p>语义：在页面中插入视频，支持MP4 WebM Ogg<br>属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>目标视频路径</td>
<td>可以使用相对&#x2F;绝对路径</td>
</tr>
<tr>
<td>controls</td>
<td>无</td>
<td>显示播放控件</td>
</tr>
<tr>
<td>autoplay</td>
<td>无</td>
<td>自动播放(谷歌浏览器需要配合muted实现静音播放)</td>
</tr>
<tr>
<td>loop</td>
<td>无</td>
<td>自动循环播放</td>
</tr>
</tbody></table>
<h3 id="链接标签-a"><a href="#链接标签-a" class="headerlink" title="链接标签(a)"></a>链接标签(a)</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href = &quot;&quot;&gt;链接标题&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>语义：点击后跳转的页面<br>特点：双标签，需要设置href属性<br>属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>href</td>
<td>目标网页路径</td>
<td>可以是”#”,此时为空链接,开发用,点击后回到网页顶部</td>
</tr>
<tr>
<td>target</td>
<td>_self <br> _blank</td>
<td>默认值，在当前页面打开<br>在新页面打开</td>
</tr>
</tbody></table>
<h3 id="列表标签-ul-li-ol-dl-dd-dt"><a href="#列表标签-ul-li-ol-dl-dd-dt" class="headerlink" title="列表标签(ul,li,ol,dl,dd,dt)"></a>列表标签(ul,li,ol,dl,dd,dt)</h3><p>在网页中按照行的方式展示关联性的内容，有无序列表，有序列表和自定义列表</p>
<p><strong>无序列表</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;列表项&lt;li&gt;</span><br><span class="line">    &lt;li&gt;列表项&lt;li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>特点：列表每一项前默认显示原点标识，ul标签表示无序列表的整体，只允许包含li标签，li标签表示列表中的某一项，可以包含任意内容</p>
<p><strong>有序列表</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项2&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
<p>特点：列表每一项前默认显示序号标识，ol标签表示有序列表的整体，只允许包含li标签，li标签表示列表中的某一项，可以包含任意内容</p>
<p><strong>自定义列表</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;标题&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;列表项&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;列表项&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>
<p>特点：列表每一项前默认缩进，dl标签表示自定义列表的整体，只允许包含dt,dd标签，dt标签表示自定义列表的主题，可以包含任意内容，dd标签表示列表中的某一项，可以包含任意内容</p>
<h3 id="表格标签-table-tr-td-th-caption-tbody"><a href="#表格标签-table-tr-td-th-caption-tbody" class="headerlink" title="表格标签(table,tr,td,th,caption,tbody)"></a>表格标签(table,tr,td,th,caption,tbody)</h3><h4 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h4><table>
<thead>
<tr>
<th>标签名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>table</td>
<td>表格整体，可用于包裹多个tr</td>
</tr>
<tr>
<td>tr</td>
<td>表格每行，用于包裹多个td</td>
</tr>
<tr>
<td>td</td>
<td>表格单元格，包裹内容</td>
</tr>
</tbody></table>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;格1&lt;/td&gt;&lt;td&gt;格2&lt;/td&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;格1&lt;/td&gt;&lt;td&gt;格2&lt;/td&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>table标签的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>border</td>
<td>数字</td>
<td>边框宽度</td>
</tr>
<tr>
<td>width</td>
<td>数字</td>
<td>表格宽度</td>
</tr>
<tr>
<td>height</td>
<td>数字</td>
<td>表格高度</td>
</tr>
</tbody></table>
<p>在table开始标签的&lt;&gt;内，例如：<code>&lt;table border=&quot;1&quot; height=&quot;200&quot; width=&quot;200&quot;&gt;</code><br>实际开发中应当使用CSS设置样式</p>
<h4 id="标题和表头单元格标签和结构标签"><a href="#标题和表头单元格标签和结构标签" class="headerlink" title="标题和表头单元格标签和结构标签"></a>标题和表头单元格标签和结构标签</h4><table>
<thead>
<tr>
<th>标签名</th>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>caption</td>
<td>表格大标题</td>
<td>表示表格整体的大标题，默认在表格整体顶部居中</td>
</tr>
<tr>
<td>th</td>
<td>表头单元格</td>
<td>表示一列小标题，通常用于表格第一行，默认内部文字加粗居中</td>
</tr>
<tr>
<td>thead</td>
<td>表格头部</td>
<td>三个结构标签均只用于加强</td>
</tr>
<tr>
<td>tbody</td>
<td>表格主体</td>
<td>编程语义清晰度，可以省略</td>
</tr>
<tr>
<td>tfoot</td>
<td>表格底部</td>
<td>内部用于包含tr标签</td>
</tr>
</tbody></table>
<p>注意：caption标签书写在table标签内部，th标签书写在tr标签内部，用于替代第一行(用作小标题的一行)的td标签</p>
<h4 id="表格的合并"><a href="#表格的合并" class="headerlink" title="表格的合并"></a>表格的合并</h4><p>在<code>&lt;td&gt;</code>标签中使用左上原则：<br><em>左上原则</em></p>
<ul>
<li>上下合并，只保留最上的，删除其他</li>
<li>左右合并，只保留最左的，删除其他</li>
</ul>
<p>属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>rowspan</td>
<td>合并单元格个数</td>
<td>跨行合并,将多行单元格垂直合并</td>
</tr>
<tr>
<td>colspan</td>
<td>合并单元格个数</td>
<td>跨列合并,将多列单元格水平合并</td>
</tr>
</tbody></table>
<p>注意：只有同一个结构标签(thead,tbody,tfoot)的单元格才能合并。<br>例如：</p>
<table border="1" height="100" width="100">
    <tr><td>格1</td><td>格2</td</tr>
    <tr><td>格1</td><td>格2</td</tr>
</table>
合并为：
<table border="1" height="100" width="100">
    <tr><td colspan="2" rowspan = "2">格1</td></tr>
    <tr></tr>
</table>

<p>其前后代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; height=&quot;100&quot; width=&quot;100&quot;&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td&gt;格1&lt;/td&gt;&lt;td&gt;格2&lt;/td&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td&gt;格1&lt;/td&gt;&lt;td&gt;格2&lt;/td&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">合并为：</span><br><span class="line">&lt;table border=&quot;1&quot; height=&quot;100&quot; width=&quot;100&quot;&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td colspan=&quot;2&quot; rowspan = &quot;2&quot;&gt;格1&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="表格综合示例"><a href="#表格综合示例" class="headerlink" title="表格综合示例"></a>表格综合示例</h4><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; height=&quot;200&quot; width=&quot;200&quot;&gt;</span><br><span class="line">&lt;caption&gt;&lt;h3&gt;成绩单&lt;/h3&gt;&lt;/caption&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;学号&lt;/th&gt;&lt;th&gt;成绩&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;小名&lt;/td&gt;&lt;td&gt;30303&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;小光&lt;/td&gt;&lt;td&gt;20202&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;tfoot&gt;</span><br><span class="line">&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;这是表格尾部&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>其效果如下：</p>
<hr>
<table border="1" height="200" width="200">
<caption><h3>成绩单</h3></caption>
<thead>
<tr><th>姓名</th><th>学号</th><th>成绩</th></tr>
</thead>
<tbody>
<tr><td>小名</td><td>30303</td><td>200</td></tr>
<tr><td>小光</td><td>20202</td><td>100</td></tr>
</tbody>
<tfoot>
<tr><td colspan="3">这是表格尾部</td></tr>
</tfoot>
</table>

<hr>
<h3 id="表单标签-input-button-select-label-textarea"><a href="#表单标签-input-button-select-label-textarea" class="headerlink" title="表单标签(input,button,select,label,textarea)"></a>表单标签(input,button,select,label,textarea)</h3><h4 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h4><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>
<p>语义：根据type属性的不同值显示不同效果<br>type属性值：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>文本框，用于输入单行文本</td>
</tr>
<tr>
<td>password</td>
<td>密码框，用于输入密码</td>
</tr>
<tr>
<td>radio</td>
<td>单选框，用于多选一</td>
</tr>
<tr>
<td>checkbox</td>
<td>多选框，用于多选多</td>
</tr>
<tr>
<td>file</td>
<td>文件选择，用于之后上传文件</td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮，用于提交数据到后端服务器</td>
</tr>
<tr>
<td>reset</td>
<td>重置按钮，用于重置，恢复表达默认值</td>
</tr>
<tr>
<td>button</td>
<td>普通按钮，默认无功能，配合js添加功能</td>
</tr>
</tbody></table>
<ol>
<li><p>input系列标签-文本框<br> 常用属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>placeholder</td>
<td>自定义</td>
<td>占位符，提示用户输入内容的文本</td>
</tr>
<tr>
<td>value</td>
<td>用户输入内容</td>
<td>提交后发送给后端服务器，配合，name，js使用</td>
</tr>
<tr>
<td>name</td>
<td>当前控件含义</td>
<td>提交后发送给后端服务器，配合，value，js使用</td>
</tr>
</tbody></table>
<p> 说明：value和name必须共同使用，发送到后端的数据格式将是name属性值&#x3D;value属性值</p>
</li>
<li><p>input系列标签-密码框<br> 常用属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>placeholder</td>
<td>自定义</td>
<td>占位符，提示用户输入内容的文本</td>
</tr>
</tbody></table>
</li>
<li><p>input系列标签-单选框<br> 常用属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>自定义</td>
<td>分组，有相同name属性的单选框为一组，一组只能选中一个</td>
</tr>
<tr>
<td>checked</td>
<td>无</td>
<td>默认选中</td>
</tr>
</tbody></table>
</li>
<li><p>input系列标签-多选框<br> 类似单选框</p>
</li>
<li><p>input系列标签-文件选择</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>multipie</td>
<td>无</td>
<td>多文件选择</td>
</tr>
</tbody></table>
</li>
<li><p>input系列标签-按钮<br> 包括submit,reset,button。显示不同功能的按钮表单控件，必须使用<code>&lt;form&gt;``&lt;/form&gt;</code>包裹</p>
</li>
</ol>
<p>注意！！！！！</p>
<h4 id="Button按钮标签"><a href="#Button按钮标签" class="headerlink" title="Button按钮标签"></a>Button按钮标签</h4><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button type=&quot;&quot;&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>其具有type属性,同input标签：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>文本框，用于输入单行文本</td>
</tr>
<tr>
<td>password</td>
<td>密码框，用于输入密码</td>
</tr>
<tr>
<td>radio</td>
<td>单选框，用于多选一</td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮，用于提交数据到后端服务器</td>
</tr>
<tr>
<td>reset</td>
<td>重置按钮，用于重置，恢复表达默认值</td>
</tr>
<tr>
<td>button</td>
<td>普通按钮，默认无功能，配合js添加功能</td>
</tr>
</tbody></table>
<p>注意：谷歌浏览器中默认为提交按钮</p>
<h4 id="select-option-textarea-label"><a href="#select-option-textarea-label" class="headerlink" title="select-option textarea label"></a>select-option textarea label</h4><p><strong>select-option下拉标签</strong><br>语义：提供多个选择项的下拉菜单表单控件<br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option&gt;选项1&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;选项2&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;选项3&lt;/option&gt;&lt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>常用属性：<br>    selected:默认选中，用于option标签</p>
<p><strong>textarea文本域标签</strong><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;textarea&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure>
<p>常用属性：</p>
<ul>
<li>cols: 文本域内可见宽度</li>
<li>rows: 文本域内可见行数<br>注意：右下角可以拖拽改变大小，实际开发建议使用CSS</li>
</ul>
<p><strong>label标签</strong><br>语义：用于绑定内容和表单标签的关系<br>使用方法：</p>
<ol>
<li><ol>
<li>使用lable标签将内容(文本等)包裹起来</li>
<li>在表单标签添加id属性</li>
<li>在lable标签的for属性设置对应的id属性值</li>
</ol>
</li>
<li>直接使用label标签把内容和表单标签一起包裹，需要将for属性删除。</li>
</ol>
<h4 id="表单综合示例"><a href="#表单综合示例" class="headerlink" title="表单综合示例"></a>表单综合示例</h4><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">昵称：&lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名&quot; value=&quot;&quot; name=&quot;nickname&quot; /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">密码：&lt;input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">性别：&lt;input type=&quot;radio&quot; name=&quot;gender&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; /&gt;女&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">婚姻状况：</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;marry&quot; checked /&gt;未婚&lt;input type=&quot;radio&quot; name=&quot;marry&quot; /&gt;已婚&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">爱好：</span><br><span class="line">&lt;!--lable标签.两种方式，单选多选都能用，可以找到点击文字也可以选择前面的框等功能--&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; id=&quot;one&quot;/&gt;&lt;label for=&quot;one&quot;&gt;敲代码&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot; /&gt;看小说&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; /&gt;刷视频</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;!--下拉菜单--&gt;</span><br><span class="line">所在城市:</span><br><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;北京&lt;/option&gt;&lt;option&gt;上海&lt;/option&gt;&lt;option&gt;武汉&lt;/option&gt;&lt;option&gt;深圳&lt;/option&gt;&lt;option&gt;广州&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;!--文件--&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; multiple /&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;!--按钮--&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; /&gt;&lt;input type=&quot;reset&quot; /&gt;&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot; /&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;!--这个可以自由包裹内容--&gt;</span><br><span class="line">&lt;button type=&quot;submit&quot;&gt;提交按钮&lt;/button&gt;&lt;button type=&quot;reset&quot;&gt;重置按钮&lt;/button&gt;&lt;button type=&quot;button&quot;&gt;普通按钮&lt;/button&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;!--文本域，可以输入大量文字，如评论区--&gt;</span><br><span class="line">评价：</span><br><span class="line">&lt;textarea&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>表现效果：</p>
<hr>
<form>
昵称：<input type="text" placeholder="请输入用户名" value="" name="nickname" /><br /><br />
密码：<input type="password" placeholder="请输入密码" /><br /><br />
性别：<input type="radio" name="gender" />男 <input type="radio" name="gender" />女<br /><br />
婚姻状况：
<input type="radio" name="marry" checked />未婚<input type="radio" name="marry" />已婚<br /><br />
爱好：
<input type="checkbox" id="one"/><label for="one">敲代码</label>
<label><input type="checkbox" />看小说</label>
<input type="checkbox" />刷视频
<br /><br />
所在城市:
<select>
<option>北京</option><option>上海</option><option>武汉</option><option>深圳</option><option>广州</option>
</select>
<br /><br />
<input type="file" multiple />
<br /><br />
<input type="submit" /><input type="reset" /><input type="button" value="普通按钮" />
<br /><br />
<button type="submit">提交按钮</button><button type="reset">重置按钮</button><button type="button">普通按钮</button>
<br /><br />
评价：
<textarea></textarea>
</form>

<hr>
<h3 id="语义化标签-div-span-so-on"><a href="#语义化标签-div-span-so-on" class="headerlink" title="语义化标签 (div span so on)"></a>语义化标签 (div span so on)</h3><p>div,span标签常与img标签或者css联用，而不是用于显示文本<br><strong>div</strong><br>使用<code>&lt;div&gt;&lt;/div&gt;</code>括起来的内容无论多短，都独占一行<br><strong>span</strong><br>使用<code>&lt;span&gt;&lt;/span&gt;</code>括起来的内容都在一行<br><strong>其他</strong><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240512225147.png"><br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;header&gt;网页头部&lt;/header&gt;</span><br><span class="line"> &lt;nav&gt;网页导航&lt;/nav&gt;</span><br><span class="line"> &lt;footer&gt;网页底部&lt;/footer&gt;</span><br><span class="line"> &lt;aside&gt;网页侧边栏&lt;/aside&gt;</span><br><span class="line"> &lt;section&gt;网页区块&lt;/section&gt;</span><br><span class="line"> &lt;article&gt;网页文章&lt;/article&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p>当代码中存在多个空格换行缩进等时，浏览器只会解析出一个，就需要用到字符实体：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240512225646.png"></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;1级标签&lt;/h1&gt;</span><br><span class="line">文章&lt;br /&gt;可以换行&lt;br /&gt;</span><br><span class="line">&lt;img src=&quot;./1.jpg&quot; alt=&quot;图片显示失败文本&quot; title=&quot;鼠标悬停会显示&quot; width=&quot;200&quot; /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;audio src=&quot;./1.mp3&quot; autoplay loop controls&gt;&lt;/audio&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;video src=&quot;./1.mp4&quot; controls autoplay height=&quot;400&quot; muted&gt;&lt;/video&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;a href=&quot;https://www.bilibili.com/video/BV1XT4y1o7jM?t=3.3&quot; target=&quot;_blank&quot;&gt;视频&lt;/a&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;a href=&quot;./12.html&quot; target=&quot;_blank&quot;&gt;本地网址&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot; #&quot;&gt;回到顶部&lt;/a&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;香蕉&lt;/li&gt;</span><br><span class="line">&lt;li&gt;榴莲&lt;/li&gt;</span><br><span class="line">&lt;li&gt;菠萝&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;莉莉：100&lt;/li&gt;</span><br><span class="line">&lt;li&gt;佳佳：80&lt;/li&gt;</span><br><span class="line">&lt;li&gt;糖糖：60&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;主题&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;内容1&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;内容2&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;内容3&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>

<h3 id="优秀学生信息"><a href="#优秀学生信息" class="headerlink" title="优秀学生信息"></a>优秀学生信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;</span><br><span class="line">&lt;caption&gt;&lt;h3&gt;优秀学生信息表格&lt;/h3&gt;&lt;/caption&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;年级&lt;/th&gt;</span><br><span class="line">&lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">&lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">&lt;th&gt;班级&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td rowspan=&quot;2&quot;&gt;高三&lt;/td&gt;</span><br><span class="line">&lt;td&gt;张三&lt;/td&gt;</span><br><span class="line">&lt;td&gt;10&lt;/td&gt;</span><br><span class="line">&lt;td&gt;三年二班&lt;/td&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;李四&lt;/td&gt;</span><br><span class="line">&lt;td&gt;20&lt;/td&gt;</span><br><span class="line">&lt;td&gt;三年三班&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;tfoot&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;评语&lt;/td&gt;</span><br><span class="line">&lt;td colspan=&quot;3&quot;&gt;你们都很优秀&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<hr>
<table border="1" width="400" height="400">
<caption><h3>优秀学生信息表格</h3></caption>
<thead>
<tr>
<th>年级</th>
<th>姓名</th>
<th>学号</th>
<th>班级</th>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2">高三</td>
<td>张三</td>
<td>10</td>
<td>三年二班</td>
<tr>
<td>李四</td>
<td>20</td>
<td>三年三班</td>
</tr>
</tbody>
<tfoot>
<tr>
<td>评语</td>
<td colspan="3">你们都很优秀</td>
</tr>
</tfoot>
</table>
*****


<h3 id="会员注册"><a href="#会员注册" class="headerlink" title="会员注册"></a>会员注册</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;h1&gt;青春不常在，抓紧谈恋爱&lt;/h1&gt;</span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">昵称：</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入昵称&quot; /&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">性别：</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;gender&quot; /&gt;女&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;gender&quot; /&gt;男&lt;/label&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">生日：</span><br><span class="line">&lt;input type=&quot;date&quot; /&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">城市：</span><br><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;北京&lt;/option&gt;</span><br><span class="line">&lt;option&gt;上海&lt;/option&gt;</span><br><span class="line">&lt;option&gt;广州&lt;/option&gt;</span><br><span class="line">&lt;option&gt;深圳&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">婚姻状况：</span><br><span class="line">&lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;marry&quot; checked /&gt;未婚&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;marry&quot; /&gt;离异&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;marry&quot; /&gt;保密&lt;/label&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">兴趣爱好：</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot; /&gt;追剧&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot; /&gt;看书&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot; /&gt;运动&lt;/label&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">个人介绍：</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;textarea cols=&quot;50&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;h2&gt;我承诺：&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;年满十八岁，单身&lt;/li&gt;</span><br><span class="line">&lt;li&gt;抱着严肃的态度&lt;/li&gt;</span><br><span class="line">&lt;li&gt;真诚寻找另一半&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; /&gt;我同意以上条款&lt;/label&gt;</span><br><span class="line">&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;button type=&quot;submit&quot;&gt;免费注册&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><h2 id="基础认知"><a href="#基础认知" class="headerlink" title="基础认知"></a>基础认知</h2><p>CSS(Cascading Style Sheets):层叠样式表<br>用于给页面中的HTML标签设置样式，一般写在<code>&lt;style&gt;&lt;/style&gt;</code>标签中，位于<code>&lt;head&gt;&lt;/head&gt;</code>内,<code>&lt;title&gt;&lt;/title&gt;</code>标签下。<br>常见属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>文字颜色</td>
</tr>
<tr>
<td>font-size</td>
<td>字体大小</td>
</tr>
<tr>
<td>background-color</td>
<td>背景颜色</td>
</tr>
<tr>
<td>width</td>
<td>宽度</td>
</tr>
<tr>
<td>height</td>
<td>高度</td>
</tr>
</tbody></table>
<p>注意：CSS标点符号必须是英文，每一个样式键值对写完都必须用<strong>分号</strong>结束</p>
<h2 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>内嵌式：写在style标签中，style标签可以写在页面任意位置，但一般在head标签中title标签下</p>
<p>外联式：写在一个单独的.css文件下，通过link标签在网页中引入，记得先保存css文件</p>
<p>行内式：写在标签的style属性中，建议和js一起使用</p>
<h3 id="标签选择器：a-p…"><a href="#标签选择器：a-p…" class="headerlink" title="标签选择器：a,p…"></a>标签选择器：a,p…</h3><p>结构：<strong>标签名</strong>{CSS属性名:属性值;CSS属性名:属性值;……}<br>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    color:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：标签选择器选择的是一类标签而不是单独的某一个，无论有几层标签嵌套都能定位到标签。</p>
<h3 id="类选择器：-classname"><a href="#类选择器：-classname" class="headerlink" title="类选择器：.classname"></a>类选择器：.classname</h3><p>结构：**.类名**(即class属性值){CSS属性名:属性值;…}<br>作用：对页面中所有带有此类名(即class属性值相等)的标签设置样式<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.red&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>所有标签都有class属性，其值即类名；</li>
<li>类名可由数字、字母、下划线、中划线组成，但不能以数字或中划线开始；</li>
<li>一个标签可以有多个类名，之间以空格分开；</li>
<li>一个类选择器可以选中多个多种标签；</li>
<li>多个类名时以<code>&lt;style&gt;</code>里面最后一个为主</li>
</ul>
<h3 id="Id选择器-id"><a href="#Id选择器-id" class="headerlink" title="Id选择器 #id"></a>Id选择器 #id</h3><p>结构：**#id属性值**{CSS属性名:属性值;…}<br>作用：对页面中<em>那一个</em>id属性值符合的标签设置样式<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#red&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>所有标签都有id属性</li>
<li>每个id属性值只能给一个标签，即某一个标签与某个id属性值一一对应，类似身份证，不可重复</li>
<li>一个id选择器只能选中一个标签</li>
<li>标签&lt;类&lt;\ID，某标签符合多个时，按此顺序服从，即优先采用id选择器设置的样式</li>
</ul>
<p>补充：类和id的区别</p>
<ul>
<li>class类名类似昵称，可以重复，一个标签可以有多个类名</li>
<li>id类似身份证号，不可重复，一个标签只能有一个</li>
<li>id一般配合js使用，尽量少用</li>
</ul>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器 *"></a>通配符选择器 *</h3><p>结构：<strong>*</strong>{CSS属性名:属性值;…}<br>作用：对页面中<em>所有标签</em>设置样式<br>注意：极少使用</p>
<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><h3 id="字体大小-粗细-样式-倾斜-font-size"><a href="#字体大小-粗细-样式-倾斜-font-size" class="headerlink" title="字体大小 粗细 样式(倾斜)font-size"></a>字体大小 粗细 样式(倾斜)font-size</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>取值</th>
<th>注意</th>
</tr>
</thead>
<tbody><tr>
<td>font-size</td>
<td>数字+px</td>
<td>谷歌默认16px,必须有单位</td>
</tr>
<tr>
<td>font-weight</td>
<td>100~900的整百数(400,700) <br>或：正常:normal 加粗:bold</td>
<td>不是使用字体都提供了9种粗细，一般用normal&#x2F;bold</td>
</tr>
<tr>
<td>font-style</td>
<td>normal&#x2F;italic</td>
<td></td>
</tr>
</tbody></table>
<h3 id="字体系列-font-family"><a href="#字体系列-font-family" class="headerlink" title="字体系列 font-family"></a>字体系列 font-family</h3><p>常见字体系列(了解)</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>特点</th>
<th>应用场景</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>无衬线字体</td>
<td>文字笔画粗细均匀，首尾无装饰</td>
<td>网页大多使用</td>
<td>黑体，Arial</td>
</tr>
<tr>
<td>衬线字体</td>
<td>文字笔画粗细不均，首尾有笔锋</td>
<td>报刊书籍</td>
<td>宋体，times new roman</td>
</tr>
<tr>
<td>等宽字体</td>
<td>每一个字母或文字宽度相等</td>
<td>程序代码</td>
<td>Consolas,fira code</td>
</tr>
</tbody></table>
<p>格式：font-family:字体1，字体2<br>注意：从左往右按顺序查找，电脑未安装字体，显示下一个，若均未安装，根据系统显示默认字体：微软雅黑和MACOS的苹方，若字体名字由多个单词组成，建议使用引号包裹，但最后一个不需要。应当尽可能使用默认字体。</p>
<p><strong>样式的层叠</strong>给同一个标签设置了相同的样式，写在最下面的生效。</p>
<h3 id="字体属性连写-font"><a href="#字体属性连写-font" class="headerlink" title="字体属性连写 font"></a>字体属性连写 font</h3><p>格式：font:style weight size family;(简称swsf稍微舒服)<br>注释：</p>
<ul>
<li>只能省略style weight</li>
<li>如果需要同时设置连写和单独形式，单独必须在连写里面或者下面</li>
</ul>
<h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><h3 id="缩进-对齐-修饰-行高"><a href="#缩进-对齐-修饰-行高" class="headerlink" title="缩进 对齐 修饰 行高"></a>缩进 对齐 修饰 行高</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>取值</th>
<th>注意</th>
</tr>
</thead>
<tbody><tr>
<td>text_indent</td>
<td>数字+px<br>数字+em</td>
<td>文本缩进,1em等于当前标签font-size的大小</td>
</tr>
<tr>
<td>text-align</td>
<td>left:左对齐<br>center:居中对齐<br>right:右对齐</td>
<td>操作对象:文本,span,a,input,img</td>
</tr>
<tr>
<td>text-decoration</td>
<td>下划线:underline<br>删除线:line-through<br>上划线:overline<br>无装饰线:none</td>
<td>none可用于清除a标签默认的下划线</td>
</tr>
<tr>
<td>line-height</td>
<td>数字+px<br>倍数(当前标签的font-size的)</td>
<td>同时设置了行高和font连写，可能覆盖 size&#x2F;line-height</td>
</tr>
<tr>
<td>注意：</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>text-align让以上元素水平居中时，给其的父元素设置</li>
<li>单行文本垂直居中可以设置line-height:文字父元素高度</li>
<li>网页精准布局时会设置line-height:1取消上下间距</li>
</ul>
<h2 id="颜色的常见取值"><a href="#颜色的常见取值" class="headerlink" title="颜色的常见取值"></a>颜色的常见取值</h2><p>属性名：</p>
<ul>
<li>文字颜色:color</li>
<li>背景颜色:background-color<br>属性值：<table>
<thead>
<tr>
<th>颜色表示方式</th>
<th>表示涵义</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>关键词</td>
<td>预定义的颜色名</td>
<td>red,green,blue</td>
</tr>
<tr>
<td>rgb表示法</td>
<td>红绿蓝三原色,每项取值:0-255</td>
<td>rgb(0,0,0)</td>
</tr>
<tr>
<td>rgbd表示法</td>
<td>红绿蓝三原色+a透明度,取值分为0-1</td>
<td>rgba(255,255,255,0.5)</td>
</tr>
<tr>
<td>十六进制表示法</td>
<td>#开头,将数组转换为十六进制表示</td>
<td>#000000,#ff000000</td>
</tr>
</tbody></table>
</li>
</ul>
<p>说明：</p>
<ul>
<li>rgb(255,0,0) 红色</li>
<li>rgb(0,255,0) 绿色</li>
<li>rgb(0,0,255) 蓝色</li>
<li>透明度：0完全透明 1完全不透明</li>
<li>十六进制表示法下，每两位数字为一组，若每一组数字分别相同，可以略写为一位，例如#ffffff-&gt;#fff</li>
</ul>
<h2 id="选择器进阶版："><a href="#选择器进阶版：" class="headerlink" title="选择器进阶版："></a>选择器进阶版：</h2><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515181944.png"></p>
<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>语法：选择器1 选择器2{CSS}<br>结果：在选择器1所找到的标签的后代(子孙)中找到满足选择器2的标签<br>注意：选择器之间以空格分开</p>
<h3 id="子代选择器-（只包含子辈不包含孙及孙后）"><a href="#子代选择器-（只包含子辈不包含孙及孙后）" class="headerlink" title="子代选择器 &gt; （只包含子辈不包含孙及孙后）"></a>子代选择器 &gt; （只包含子辈不包含孙及孙后）</h3><p>语法：选择器1 &gt; 选择器2{CSS}<br>结果：在选择器1所找到的标签的子代中找到满足选择器2的标签</p>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器 ,"></a>并集选择器 ,</h3><p>语法：选择器1 , 选择器2{CSS}<br>结果：找到选择器1和选择器2任一个的标签<br>注意：</p>
<ul>
<li>并集选择器中每组选择器可以是基础选择器和复合选择器</li>
<li>每组选择器通常一行写一个，提高代码可读性</li>
</ul>
<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>语法：选择器1选择器2{CSS}<br>结果：找到既满足选择器1又满足选择器2的标签<br>注意：</p>
<ul>
<li>交集选择器标签必须写在最前面</li>
<li>必须紧挨着不能分隔</li>
<li>如果有标签选择器，标签选择器必须写在最开始</li>
</ul>
<h3 id="emmet语法"><a href="#emmet语法" class="headerlink" title="emmet语法"></a>emmet语法</h3><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515181655.png"><br>vs中没有，vscode有</p>
<h3 id="hover伪类选择器"><a href="#hover伪类选择器" class="headerlink" title="hover伪类选择器"></a>hover伪类选择器</h3><p>语法：选择器:hover{CSS}<br>结果：选中鼠标悬停在元素上的状态，设置样式<br>注意：选中的是状态！可以实现鼠标悬停时变色等效果</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="背景颜色background-color"><a href="#背景颜色background-color" class="headerlink" title="背景颜色background-color"></a>背景颜色background-color</h3><p>属性名：background-color<br>属性值：关键字，rgb,rgba,十六进制<br>注意点：</p>
<ul>
<li>默认值是透明rgba(0,0,0,0)、transparent</li>
<li>一般先设置</li>
</ul>
<h3 id="背景图片background-image-background-repeat（平铺）"><a href="#背景图片background-image-background-repeat（平铺）" class="headerlink" title="背景图片background-image background-repeat（平铺）"></a>背景图片background-image background-repeat（平铺）</h3><p>属性名：background-image<br>属性值：url(‘图片路径’);<br>注意：url中可以省略一号，默认水平和垂直平铺，仅仅起到装饰作用，不能撑开盒子</p>
<p>属性名：background-repeat<br>属性值：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>repeat</td>
<td>水平和垂直方向都平铺</td>
</tr>
<tr>
<td>no-repeat</td>
<td>不平铺</td>
</tr>
<tr>
<td>repeat-x</td>
<td>沿水平方向平铺</td>
</tr>
<tr>
<td>repeat-y</td>
<td>沿竖直方向平铺</td>
</tr>
</tbody></table>
<h3 id="背景位置background-position"><a href="#背景位置background-position" class="headerlink" title="背景位置background-position"></a>背景位置background-position</h3><p>属性名：background-position<br>属性值：水平方向位置 垂直方向位置<br>方位名词:</p>
<ul>
<li>水平方向：left center right </li>
<li>竖直方向：top center bottom<br>数字+px:<br>以盒子左上角为原点，x轴水平向右，y轴垂直向下，图片左上角与坐标点重合<br>注意：方位词和坐标取值可以混合使用</li>
</ul>
<h3 id="背景相关属性的连写background"><a href="#背景相关属性的连写background" class="headerlink" title="背景相关属性的连写background"></a>背景相关属性的连写background</h3><p>书写顺序：color image repeat position</p>
<h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><h3 id="块级元素display-block"><a href="#块级元素display-block" class="headerlink" title="块级元素display:block"></a>块级元素display:block</h3><p>属性：display:block<br>显示特点：独占一行，宽度默认为父元素宽度，高度默认由内容撑开，可以设置宽高 代表标签：div,p,h,ul,li,dl,dt,dd,form,header…</p>
<p>查看属性的方法，在检查中的styles</p>
<h3 id="行内元素display-inline"><a href="#行内元素display-inline" class="headerlink" title="行内元素display:inline"></a>行内元素display:inline</h3><p>属性：display:inline<br>显示特点:一行显示多个，高宽默认由内容撑开，不可设置。<br>代表标签：a,span,b,u,i,s,strong,ins,em,del …</p>
<h3 id="行内块元素display-inline-block"><a href="#行内块元素display-inline-block" class="headerlink" title="行内块元素display:inline-block"></a>行内块元素display:inline-block</h3><p>属性：display:inline-block<br>显示特点：一行显示多个，可以设置宽高<br>代表标签：input,textarea,button,select…</p>
<h3 id="元素显示模式的转换"><a href="#元素显示模式的转换" class="headerlink" title="元素显示模式的转换"></a>元素显示模式的转换</h3><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515190612.png"></p>
<p>在标签的style里增加属性display</p>
<h3 id="html嵌套规范"><a href="#html嵌套规范" class="headerlink" title="html嵌套规范"></a>html嵌套规范</h3><p>块元素一般作为大容器，可以嵌套：文本，块级元素，行内元素，行内块元素，但P标签中不要嵌套div p h 等块级元素<br>a标签内部可以嵌套任意元素，但不能嵌套阿标签</p>
<h3 id="居中方法总结"><a href="#居中方法总结" class="headerlink" title="居中方法总结"></a>居中方法总结</h3><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515190930.png"></p>
<h2 id="CSS的三大特性：继承性层叠性优先级"><a href="#CSS的三大特性：继承性层叠性优先级" class="headerlink" title="CSS的三大特性：继承性层叠性优先级"></a>CSS的三大特性：继承性层叠性优先级</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515190959.png"><br> <img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515191014.png"></p>
<p>可以减少代码<br>应用场景：</p>
<ul>
<li>为ul设置list-style:none，去除列表默认小圆点</li>
<li>直接给body标签设置统一的font-size，从而统一不同浏览器默认文字大小</li>
</ul>
<p><em>继承的失效</em><br>如果元素有浏览器默认样式，继承性任存在，但优先显示默认样式；a标签的color，h系列标签的font-size,div的高度会继承失效</p>
<h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>特性：</p>
<ul>
<li>给同一个标签设置不同的样式，样式会层叠叠加共同作用</li>
<li>给同一个标签设置相同的样式，样式会层叠覆盖，写在最后的样式会生效</li>
<li><strong>样式冲突时只有选择器优先级相同才能通过层叠性判断结果，优先级不同时按选择器优先级生效</strong></li>
</ul>
<p>（相同样式即相同属性不同值）<br>（上述是对同一优先级的选择器而言的，优先级不同时按选择器优先级生效）</p>
<h3 id="优先级-及-important"><a href="#优先级-及-important" class="headerlink" title="优先级 及 !important"></a>优先级 及 !important</h3><p><strong>优先级公式：</strong><br><code>继承&lt;通配符选择器&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;!important</code></p>
<p>!important 写在属性值后面，分号之前，不能提高继承的优先级，只要是继承优先级最低，实际开发中不建议使用！</p>
<p><strong>权重叠加计算</strong><br>复合选择器按权重叠加计算，判断哪个选择器优先级最高<br>公式：<br>    (0(第一级:行内样式个数),0(第二级:id选择器个数),0(第三级:类选择器个数),0(第四级:标签选择器))<br>比较规则：</p>
<ul>
<li>先比较第一级，有结果其余不用参考</li>
<li>第一级相同，比较第二级，有结果其余不用参考….</li>
<li>如果所有数字相同，则按层叠性</li>
<li>！important若不是继承，优先级最高！</li>
</ul>
<h3 id="样式查错（样式无法出现）"><a href="#样式查错（样式无法出现）" class="headerlink" title="样式查错（样式无法出现）"></a>样式查错（样式无法出现）</h3><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240515191407.png"></p>
<h3 id="PXcook的使用（用于根据设计图制作网页）"><a href="#PXcook的使用（用于根据设计图制作网页）" class="headerlink" title="PXcook的使用（用于根据设计图制作网页）"></a>PXcook的使用（用于根据设计图制作网页）</h3><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240516211419.png"></p>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>盒子实际大小&#x3D;内容区域大小+内边距大小+边框大小<br>盒子：</p>
<ul>
<li>页面中的每一个标签，都可看做一个“盒子”，通过盒子的视角更方便布局</li>
<li>浏览器在渲染（显示）网页时，会将网页中的元素视为一个个矩形区域，也称之为盒子</li>
<li>CSS中规定每个盒子由：内容区域，内边距区域，边框区域，外边距区域构成</li>
</ul>
<h3 id="内容的宽度和高度"><a href="#内容的宽度和高度" class="headerlink" title="内容的宽度和高度"></a>内容的宽度和高度</h3><p>width属性和height属性默认设置的时盒子的内容区域大小，设置方法见上文</p>
<h3 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h3><p>作用：<br>属性：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>作用</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td>边框粗细</td>
<td>数字+px</td>
</tr>
<tr>
<td>border-style</td>
<td>边框样式</td>
<td>solid:实线,dashed:虚线,dotted:点线</td>
</tr>
<tr>
<td>border-color</td>
<td>边框颜色</td>
<td>颜色取值</td>
</tr>
<tr>
<td>border</td>
<td>单个取值连写，取值之间用空格分开</td>
<td>border:10px solid red</td>
</tr>
<tr>
<td>border-方向</td>
<td>只设置某个方向的边框</td>
<td>同border</td>
</tr>
</tbody></table>
<p>left,right,top,bottom<br>如果子盒子没有设置宽度，宽度默认为父盒子宽度，此时设置子盒子左右的padding或border不会撑大盒子。</p>
<h3 id="内边距padding内容与边框的距离"><a href="#内边距padding内容与边框的距离" class="headerlink" title="内边距padding内容与边框的距离"></a>内边距padding内容与边框的距离</h3><p>作用：设置边框和内容区域之间的距离<br>属性名：padding<br>常见取值：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>一个</td>
<td>padding:10px</td>
<td>上下左右均为10px</td>
</tr>
<tr>
<td>两个</td>
<td>padding:10px 20px</td>
<td>上下为10px,左右为20px</td>
</tr>
<tr>
<td>三个</td>
<td>padding:10px 20px 30px</td>
<td>上10px,左右20px,下30px</td>
</tr>
<tr>
<td>四个</td>
<td>padding:10px 20px 30px 40px</td>
<td>上10右20下30左40</td>
</tr>
</tbody></table>
<p>即从上开始赋值，顺时针赋值，没有赋值的同对面<br>若只给某个方向赋值，使用padding-方位名词，取值为数字+px<br>对所有的盒子生效.box</p>
<h3 id="自动内减"><a href="#自动内减" class="headerlink" title="自动内减"></a>自动内减</h3><p>box-sizing:border-box;</p>
<h3 id="外边距margin盒子与盒子的间距"><a href="#外边距margin盒子与盒子的间距" class="headerlink" title="外边距margin盒子与盒子的间距"></a>外边距margin盒子与盒子的间距</h3><p>作用:设置边框以外，盒子与盒子之间的距离<br>属性名:margin<br>常见取值:与padding相同<br>记忆规则:从上开始赋值，然后顺时针赋值，如果设置赋值的，看对面的!!</p>
<p>若只给某个方向单独设置外边距，方法同padding,margin-方位名词。<br>应用：</p>
<table>
<thead>
<tr>
<th>方向</th>
<th>属性</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>水平方向</td>
<td>margin-left</td>
<td>让当前盒子往右移动</td>
</tr>
<tr>
<td>水平方向</td>
<td>margin.right</td>
<td>让右边的盒子往右移动</td>
</tr>
<tr>
<td>垂直方向</td>
<td>margin-top</td>
<td>往当前盒子往下移动</td>
</tr>
<tr>
<td>垂直方向</td>
<td>margin-bottom</td>
<td>让下面的盒子往下移动</td>
</tr>
</tbody></table>
<h3 id="清除默认边距"><a href="#清除默认边距" class="headerlink" title="清除默认边距"></a>清除默认边距</h3><p>场景:浏览器会默认给部分标签设置默认的margin和padding，但一般在项目开始前需要先清除这些标签默认的margin和padding，后续自己设置</p>
<ul>
<li>比如:body标签默认有margin:8px</li>
<li>比如:p标签默认有上下的margin</li>
<li>比如:ul标签默认由上下的margin和padding-left<br>解决方法:可以使用通配符 *</li>
</ul>
<h3 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h3><p>1、水平不合并<br>水平布局的盒子左右margin正常，互不影响，二者距离为左右margin之和<br>2、垂直块元素合并（以最大值为准<br>垂直布局的块级元素，上下margin合并，距离为二者最大者。<br>3、嵌套块元素<br>场景:互相嵌套的块级元素，子元素的 margin-top 会作用在父元素上<br>结果:导致父元素一起往下移动<br>解决方法:</p>
<ul>
<li>给父元素设置border-top或者 padding-top(分隔父子元素的margin-top)</li>
<li>给父元素设置overflow:hidden</li>
<li>转换成行内块元素</li>
<li>设置浮动<br>4、 无效情况<br>当给行内元素设置margin和padding时，水平方向的有效，垂直方向无效</li>
</ul>
<h2 id="伪类选择器，标准流，浮动"><a href="#伪类选择器，标准流，浮动" class="headerlink" title="伪类选择器，标准流，浮动"></a>伪类选择器，标准流，浮动</h2><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>作用:根据元素在HTML中的结构关系查找元素<br>优势:减少对于HTML中类的依赖，有利于保持代码整洁<br>场景:常用于查找某父级选择器中的子元素</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>E:first-chi1dl{}</td>
<td>匹配父元素中第一个子元素。并且是E元素</td>
</tr>
<tr>
<td>E:1ast-chi1d{}</td>
<td>区配父元素中最后一个子元素，并且是E元素</td>
</tr>
<tr>
<td>E:nth-child(n){}</td>
<td>匹配父元素中第n个子元素，并且是E元素</td>
</tr>
<tr>
<td>E:nth.1ast-child(n){}</td>
<td>区配父元素中倒数第n个子元素，并且是E元素</td>
</tr>
<tr>
<td>E:nth-of-type(n){}</td>
<td>旨在父元素同类型(E)子元素范围内匹配第n个</td>
</tr>
<tr>
<td>n的注意点：</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>n为1，2，3，4，…</li>
<li>通过n可以组成公式:奇数2n+1,2n-1,odd;偶数2n,even;前五个-n+5;从第五个往后找n+5;</li>
</ul>
<h3 id="伪元素：："><a href="#伪元素：：" class="headerlink" title="伪元素：："></a>伪元素：：</h3><p>伪元素:一般页面中的非主体内容可以使用伪元素<br>区别:<br>1.元素:HTML设置的标签<br>2.伪元素:由 CSS 模拟出的标签效果<br>种类:</p>
<table>
<thead>
<tr>
<th>仿元素</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>::before</td>
<td>在父元素内容的是前添加一个的元素</td>
</tr>
<tr>
<td>::after</td>
<td>在父元素内容的曼后添加一个的元素</td>
</tr>
<tr>
<td>注意点:</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>必须设置content属性才能生效</li>
<li>伪元素默认是行内元素</li>
</ul>
<h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><p>标准流:又称文档流，是浏览器在渲染显示网页内容时默认采用的一套排版规则，规定了应该以何种方式排列元素<br>常见标准流排版规则:</p>
<ul>
<li>块级元素:从上往下，垂直布局，独占一行</li>
<li>行内元素 或 行内块元素:从左往右，水平布局，空间不够自动折行</li>
</ul>
<h3 id="浮动float"><a href="#浮动float" class="headerlink" title="浮动float"></a>浮动float</h3><p>属性名：float<br>属性值：left:左浮动 float:右浮动<br>注意：</p>
<ul>
<li>浮动元素会脱离标准流(简称:脱标)，在标准流中不占位置，相当于从地面飘到了空中</li>
<li>浮动元素比标准流高半个级别，可以覆盖标准流中的元素</li>
<li>浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动</li>
<li>浮动元素会受到上面元素边界的影响</li>
<li>浮动元素有特殊的显示效果<ul>
<li>一行可以显示多个</li>
<li>可以设置宽高</li>
</ul>
</li>
<li>浮动的元素不能通过text-align:center或者margin:0 auto，让浮动元素本身水平居中</li>
</ul>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>含义:清除浮动带来的影响<br>影响:如果子元素浮动了，此时子元素不能撑开标准流的块圾父元素<br>原因:子元素浮动后脱标 一 不占位置<br>目的:需要父元素有高度，从而不影响其他网页元素的布局<br>清除浮动的方法 </p>
<ol>
<li>直接设置父元素高度<br> 优点:简单组暴，方便<br> 缺点:有些布局中不能团定父元素高度。如:新闻列表、京东推荐模块</li>
<li>额外标签法<br> 操作:<ol>
<li>在父元素内容的最后添加一个块级元素</li>
<li>给添加的块级元素设置 clear:both<br> 缺点:会在更面中添加额外的标签。会让更面的HTML结构变得复杂</li>
</ol>
</li>
<li>单伪元素清除法<br> 操作:用伪元素替代了额外标签<br> 示例： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.clearfix::after</span><br><span class="line">&#123;</span><br><span class="line">content:&quot;&#x27;;</span><br><span class="line">display:block:</span><br><span class="line">clear:both;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 优点:项目中使用，直接给标签加类即可清除浮动</li>
<li>给父元素设置overflow:hidden<br> 优点:方便</li>
</ol>
<p>补充：块格式化上下文(BlockFormatting Context)BFC的介绍<br>BFC是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。<br>创建BFC方法:</p>
<ol>
<li>html标签是BFC盒子</li>
<li>浮动元素是BFC盒子</li>
<li>行内块元素是BFC盒子</li>
<li>overflow属性取值不为visible.如:auto、hidden..</li>
</ol>
<p>BFC盒子常见特点:</p>
<ul>
<li>BFC盒子会默认包事住内部子元素(标准流、浮动)一应用:清除浮动</li>
<li>BFC盒子本身与子元素之间不存在margin的塌陷现象一应用:解决margin的塌陷</li>
</ul>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p><strong>应用场景</strong><br>可以让元素自由的摆放在网页的任意位置,一般用于盒子之间的展叠情况定，解决盒子与盒子之问的层叠问题-&gt;定位之后元素层级最高，可以层叠在其他盒子上。可以让盒子始终固定在屏幕中的某个位置。<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240523001607.png"></p>
<p>常见布局方式：<br>标准流：块级元素独占一行，行内、行内块元素一行多个<br>浮动：让原本垂直布局的块元素变成水平布局<br>定位：让元素自由摆放在网页的任意位置，常用于盒子层叠的情况</p>
<p><strong>基本使用</strong></p>
<ol>
<li>设置定位方式<br>属性名：position<br>常用属性值：<table>
<thead>
<tr>
<th>定位方式</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>静态</td>
<td>static</td>
</tr>
<tr>
<td>相对</td>
<td>relative</td>
</tr>
<tr>
<td>绝对</td>
<td>absolute</td>
</tr>
<tr>
<td>固定</td>
<td>fixed</td>
</tr>
</tbody></table>
</li>
<li>设置偏移<br>偏移水平和垂直方向各选一个，一般采用就近原则:<table>
<thead>
<tr>
<th>方向</th>
<th>属性名</th>
<th>属性值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>水平</td>
<td>left</td>
<td>数字+px</td>
<td>距离左边的距离</td>
</tr>
<tr>
<td>水平</td>
<td>left</td>
<td>数字+px</td>
<td>距离右边的距离</td>
</tr>
<tr>
<td>垂直</td>
<td>top</td>
<td>数字+px</td>
<td>距离上边的距离</td>
</tr>
<tr>
<td>垂直</td>
<td>bottom</td>
<td>数字+px</td>
<td>距离下边的距离</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="静态定位static"><a href="#静态定位static" class="headerlink" title="静态定位static"></a>静态定位static</h3><p>默认情况下就是静态定位，即之前的标准流，不做介绍</p>
<h3 id="相对定位relative"><a href="#相对定位relative" class="headerlink" title="相对定位relative"></a>相对定位relative</h3><p>说明：相对自己之前的位置移动<br>特点：</p>
<ul>
<li>需要配合方位属性实现移动</li>
<li>相对自己原来的位置进行移动</li>
<li>在页面中占位置（没有脱离标准流）</li>
</ul>
<p>应用：</p>
<ul>
<li>配合绝对定位实现子绝对父相对，对网页布局影响最小</li>
<li>用于小范围移动</li>
</ul>
<h3 id="绝对定位：默认相对浏览器可视区域的移动absolute"><a href="#绝对定位：默认相对浏览器可视区域的移动absolute" class="headerlink" title="绝对定位：默认相对浏览器可视区域的移动absolute"></a>绝对定位：默认相对浏览器可视区域的移动absolute</h3><p>说明：相对非静态定位的父元素(祖先)进行定位移动<br>特点：</p>
<ul>
<li>需要配合方位属性实现移动</li>
<li>默认相对浏览器可视区域移动</li>
<li>在页面中不占位置（已经脱离标准流）</li>
</ul>
<p>（祖先包括父代）只要祖先有position属性即使没有left,right等属性也可以，祖先没有则相对浏览器可视区域</p>
<h3 id="固定定位fixed"><a href="#固定定位fixed" class="headerlink" title="固定定位fixed"></a>固定定位fixed</h3><p>说明：相对浏览器进行定位移动<br>特点：</p>
<ul>
<li>需要配合方位属性实现移动</li>
<li>相对浏览器可视区域移动</li>
<li>在页面中不占位置（已经脱离标准流）</li>
</ul>
<p>应用：让盒子固定在屏幕某个位置</p>
<h3 id="元素的层级关系及其更改方法z-index"><a href="#元素的层级关系及其更改方法z-index" class="headerlink" title="元素的层级关系及其更改方法z-index"></a>元素的层级关系及其更改方法z-index</h3><p>标准流&lt;浮动&lt;定位（三种定位方式层级一样，html最下方的在最上层）<br>用于更改定位元素的层级，属性名为z-index，属性值为数字</p>
<h2 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h2><p>基浏览器文字类型元素排版中存在用于对齐的基线，当图片与文字在同一行显示时底部不是对齐的，以下是解决方法</p>
<h3 id="垂直对齐方式vertical-align"><a href="#垂直对齐方式vertical-align" class="headerlink" title="垂直对齐方式vertical-align"></a>垂直对齐方式vertical-align</h3><table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>baseline</td>
<td>默认，基线对齐</td>
</tr>
<tr>
<td>top</td>
<td>顶部对齐</td>
</tr>
<tr>
<td>middle</td>
<td>中部对齐</td>
</tr>
<tr>
<td>bottom</td>
<td>底部对齐</td>
</tr>
</tbody></table>
<p>通过此属性，可以解决以下问题：</p>
<ul>
<li>文本框与表单按钮无法对齐</li>
<li>input和img无法对齐</li>
<li>div中文本框无法贴顶</li>
<li>div不设高度由Img标签撑开使存在额外间隙</li>
<li>使用line-height让img标签垂直居中</li>
</ul>
<h3 id="光标效果cursor"><a href="#光标效果cursor" class="headerlink" title="光标效果cursor"></a>光标效果cursor</h3><p>场景:设置鼠标光标在元索上时显示的样式<br>属性名:cursor<br>常见属性值:</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>default</td>
<td>默认，通常是箭头</td>
</tr>
<tr>
<td>pointer</td>
<td>小手效果，提示用户可以点击</td>
</tr>
<tr>
<td>text</td>
<td>I字型，提示用户可以选择文字</td>
</tr>
<tr>
<td>move</td>
<td>十字光标，提示用户可以移动</td>
</tr>
</tbody></table>
<h3 id="边框圆角border-radius"><a href="#边框圆角border-radius" class="headerlink" title="边框圆角border-radius"></a>边框圆角border-radius</h3><p>应用：可以让盒子四个角变得圆润，可以用于绘制圆形，胶囊形等，<br>增加页面细节，提高用户体验<br>属性名：border-radius<br>属性值：数字+px、百分比<br>原理：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240527165923.png"><br>赋值规则：从左上角开始赋值，顺时针赋值，没有赋值的看对角</p>
<h3 id="溢出部分效果（超过盒子大小的内容如何显示）overflow"><a href="#溢出部分效果（超过盒子大小的内容如何显示）overflow" class="headerlink" title="溢出部分效果（超过盒子大小的内容如何显示）overflow"></a>溢出部分效果（超过盒子大小的内容如何显示）overflow</h3><p>应用：控制盒子内容部分所超出盒子范围的区域（溢出部分）的显示效果。如显示、隐藏、滚动条<br>属性名：Overflow<br>属性值：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>visible</td>
<td>默认值，溢出部分可见</td>
</tr>
<tr>
<td>hidden</td>
<td>溢出部分隐藏</td>
</tr>
<tr>
<td>scroll</td>
<td>无论是否溢出，都显示滚动条</td>
</tr>
<tr>
<td>auto</td>
<td>根据是否溢出，自动显示会隐藏滚动条</td>
</tr>
</tbody></table>
<h3 id="元素隐藏"><a href="#元素隐藏" class="headerlink" title="元素隐藏"></a>元素隐藏</h3><p>可以实现鼠标停留才显示的效果，结合伪类选择器<br>应用:让元素本身在屏幕中不可见。<br>常见属性：</p>
<ol>
<li>visibility:hidden 隐藏元素本身，并且在网页中占位置</li>
<li>display:none 隐藏元素本身，并且在网页中不占位置</li>
</ol>
<h3 id="元素透明度和边框合并"><a href="#元素透明度和边框合并" class="headerlink" title="元素透明度和边框合并"></a>元素透明度和边框合并</h3><p><strong>透明度</strong><br>应用：让某元素整体（包括内容）一起变透明<br>属性名：opacity<br>属性值：0~1之间的数字，数字越高透明度越低<br><strong>边框合并</strong><br>应用：让相邻表格边框进行合并，得到细线边框效果<br>代码：border-collapse:collapse;</p>
<h3 id="链接、焦点、属性选择器"><a href="#链接、焦点、属性选择器" class="headerlink" title="链接、焦点、属性选择器"></a>链接、焦点、属性选择器</h3><p><strong>链接伪类选择器</strong><br>应用：常用于选中超链接的不同状态<br>语法:</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>a:link{}</td>
<td>选中a链接未访问过的状态</td>
</tr>
<tr>
<td>a:visited{}</td>
<td>选中a链接访问后的状态</td>
</tr>
<tr>
<td>a:hover{}</td>
<td>选中鼠标悬停的状态</td>
</tr>
<tr>
<td>a:active{}</td>
<td>选中鼠标按下的状态</td>
</tr>
</tbody></table>
<p>同时使用上述选择器时，按照LVHA的顺序书写</p>
<p><strong>属性选择器</strong><br>应用：通过元素上的html属性选中元素，常用于input标签<br>语法：</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>E[attr]</td>
<td>选中具有attr属性的E元素</td>
</tr>
<tr>
<td>E[attr&#x3D;”val”]</td>
<td>选中具有attr属性并且属性值等于val的E元素</td>
</tr>
</tbody></table>
<p><strong>焦点选择器</strong><br>应用：选中元素获取焦点时的状态，常用于表单控件<br>语法：input:focus{}</p>
<h3 id="背景图片大小background-size及背景的连写形式"><a href="#背景图片大小background-size及背景的连写形式" class="headerlink" title="背景图片大小background-size及背景的连写形式"></a>背景图片大小background-size及背景的连写形式</h3><p>作用:设置背景图片的大小，<br>语法:background-size:宽度 高度;<br>取值:</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>数字+px</td>
<td>简单方便，常用</td>
</tr>
<tr>
<td>百分比</td>
<td>相对于当前盒子自身的宽高百分比</td>
</tr>
<tr>
<td>contain</td>
<td>包含，将背景图片等比例缩放，直到不会超出盒子的最大</td>
</tr>
<tr>
<td>cover</td>
<td>覆盖，将背景图片等比例缩放，直到刚好填满整个盒子没有空白</td>
</tr>
</tbody></table>
<h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><p><strong>文字阴影text-shadow</strong><br>作用:给文字添加阴影效果，吸引用户注意<br>属性名:text-shadow<br>取值:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必须，水平偏移量。允许负值</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必须，垂直偏移量，允许负值</td>
</tr>
<tr>
<td>blur</td>
<td>可选，模糊度</td>
</tr>
<tr>
<td>color</td>
<td>可选，阴影颜色</td>
</tr>
</tbody></table>
<p>拓展:<br>阴影可以叠加设置，每组阴影取值之间以逗号隔开</p>
<p><strong>盒子阴影box-shadow</strong><br>作用:给盒子添加阴影效果，吸引用户注意，体现页面的制作细节<br>属性名:box-shadow<br>取值:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必须，水平偏移量。允许负值</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必须，垂直偏移量。允许负值</td>
</tr>
<tr>
<td>blur</td>
<td>可选，模糊度</td>
</tr>
<tr>
<td>spread</td>
<td>可选，阴影扩大</td>
</tr>
<tr>
<td>color</td>
<td>可选，阴影颜色</td>
</tr>
<tr>
<td>inset</td>
<td>可选，将阴影改为内部阴影</td>
</tr>
</tbody></table>
<h3 id="过渡transition"><a href="#过渡transition" class="headerlink" title="过渡transition"></a>过渡transition</h3><p>作用:让元素的样式慢慢的变化，常配合hover使用，增强网页交互体验<br>属性名:transition<br>常见取值:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>过渡的属性</td>
<td>a11:所有能过渡的屈性都过渡、具体属性名如:width:只有width有过渡</td>
</tr>
<tr>
<td>过渡的时长</td>
<td>数字+s(秒)</td>
</tr>
</tbody></table>
<p>注意点:</p>
<ol>
<li>过渡需要:默认状态 和 hover状态样式不同，才能有过渡效果</li>
<li>transition属性给需要过渡的元素本身加</li>
<li>transition属性设置在不同状态中，效果不同的<ol>
<li>给默认状态设置，鼠标移入移出都有过渡效果</li>
<li>给hover状态设置，鼠标移入有过渡效果，移出没有</li>
</ol>
</li>
</ol>
<h2 id="项目知识补充"><a href="#项目知识补充" class="headerlink" title="项目知识补充"></a>项目知识补充</h2><h3 id="html代码详解"><a href="#html代码详解" class="headerlink" title="html代码详解"></a>html代码详解</h3><p>标识网页使用的语言<br><code>&lt;html lang=&quot;en&quot; </code><br>作用:搜索引擎归类 +浏览器翻译<br>常见语言:zh-CN 简体中文&#x2F;en 英文</p>
<p>标识网页使用的字符编码<br><code>&lt;meta charset=&quot;UTF-8&quot;</code><br>作用:保存和打开的字符编码需要统一设置，否则可能会出现乱码<br>常见字符编码:</p>
<ol>
<li>UTF-8:万国码，国际化的字符编码，收录了全球语言的文字</li>
<li>GB2312:6000+汉字</li>
<li>GBK:20000+汉字<br>注意点:开发中统一使用UTF-8 字符编码即可</li>
</ol>
<h3 id="搜索引擎优化SEO"><a href="#搜索引擎优化SEO" class="headerlink" title="搜索引擎优化SEO"></a>搜索引擎优化SEO</h3><p>SE0(Search Engine Optimization):搜索引擎优化<br>作用:让网站在搜索引擎上的排名靠前<br>提升SEO的常见方法:</p>
<ol>
<li>竟价排名</li>
<li>将网页制作成html后缀</li>
</ol>
<p><strong>SEO三大标签</strong><br>1.title:网页标题标签<br>2.description:网页描述标签<br>3.keywords:网页关键词标签</p>
<h3 id="有语义的布局标签"><a href="#有语义的布局标签" class="headerlink" title="有语义的布局标签"></a>有语义的布局标签</h3><p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240601214725.png"></p>
<h3 id="ico图标"><a href="#ico图标" class="headerlink" title="ico图标"></a>ico图标</h3><p>显示在标签页标题左侧的小图标，常使用.ico格式的图标<br>常见代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;shortcut ico&quot; href=&quot;ico图标路径&quot; type=&quot;image/x-icon&quot;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="版心（将主要内容约束到中间）"><a href="#版心（将主要内容约束到中间）" class="headerlink" title="版心（将主要内容约束到中间）"></a>版心（将主要内容约束到中间）</h3><p>场景:把页面的主体内容约束在网页中间<br>作用:让不同大小的屏幕都能看到页面的主体内容<br>代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">container &#123;</span><br><span class="line">width: 1240px;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意点:版心类名常用container wrapper w等</p>
<h3 id="css书写顺序规范"><a href="#css书写顺序规范" class="headerlink" title="css书写顺序规范"></a>css书写顺序规范</h3><p>衡量程序员的能力，除了要看实现业务需求的能力，还要看平时书写代码的规范(专业性)<br>不同的CSS书写顺序会影响浏览器的渲染性能，推荐前端工程师使用专业的书写顺序习惯</p>
<table>
<thead>
<tr>
<th>顺序</th>
<th>类别</th>
<th>属性</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>布局属性</td>
<td>display position float clear visibility overflow</td>
</tr>
<tr>
<td>2</td>
<td>盒子模型+背景</td>
<td>width height margin padding border background</td>
</tr>
<tr>
<td>3</td>
<td>文本内容属性</td>
<td>color font text-decoration text-align line-height</td>
</tr>
<tr>
<td>4</td>
<td>点缀属性</td>
<td>cursor border-radius text-shadow box-shadow</td>
</tr>
</tbody></table>
<p>注意点:<br>开发中推荐多用类+后代，但不是层级越多越好，一个选择器中的类选择器的个数推荐 不要超过3个</p>
<h3 id="项目开发注意"><a href="#项目开发注意" class="headerlink" title="项目开发注意"></a>项目开发注意</h3><p>一般项目开始前，首先会 去除掉浏览器默认样式，设置为当前项目需要的初始化样式<br><em>去除常见标签默认的 margin 和 padding</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body,h1,h2,h3,h4,h5,h6,</span><br><span class="line">p,ul,ol,li,dl,dt,dd,input</span><br><span class="line">&#123;margin:0;padding:0;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>前端</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Websites</title>
    <url>/2024/05/02/Websites/</url>
    <content><![CDATA[<p>有趣的知识网址</p>
<span id="more"></span>



<p><a href="https://www.cnblogs.com/lqerio">学长1个人主页</a></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Others</tag>
      </tags>
  </entry>
  <entry>
    <title>blog-note</title>
    <url>/2024/04/24/blog-note/</url>
    <content><![CDATA[<p>博客搭建笔记</p>
<span id="more"></span>
<h2 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h2><p>安装方法可自行搜索<br><strong>nodejs</strong>    <a href="http://nodejs.cn/download/">下载地址</a><br><strong>Git</strong>    <a href="https://git-scm.com/">下载地址</a></p>
<p>安装成功后，右键可见Git Bash Here,打开，在弹出的终端中输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v </span><br></pre></td></tr></table></figure>

<p>若输出版本号，则安装成功，若没有需要重新安装，注意添加环境变量</p>
<p><strong>cnpm</strong><br>在git bash执行下面的命令安装cnpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm -v </span><br></pre></td></tr></table></figure>

<p>输出版本号则安装成功</p>
<p><strong>Hexo</strong><br>在git bash执行下面的命令安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-cli -g </span><br></pre></td></tr></table></figure>

<p>新建一个文件夹，作为今后博文的本地存储文件夹，在此文件夹中右键打开git bash，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>若在<code>install dependencies</code>卡住，按<code>ctrl + c</code>结束命令，执行以下命令使用国内镜像完成初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install </span><br></pre></td></tr></table></figure>

<p>等命令执行完成后，执行以下命令即可预览博客：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>点击弹出的以httpk开头的网址，在浏览器中打开即可见到当前的预览。</p>
<h2 id="hexo基本使用"><a href="#hexo基本使用" class="headerlink" title="hexo基本使用"></a>hexo基本使用</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="发表草稿"><a href="#发表草稿" class="headerlink" title="发表草稿"></a>发表草稿</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish /[layout]<span class="string">&quot;My New Draft&quot;</span> </span><br></pre></td></tr></table></figure>

<h3 id="清除静态文件和缓存"><a href="#清除静态文件和缓存" class="headerlink" title="清除静态文件和缓存"></a>清除静态文件和缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br></pre></td></tr></table></figure>

<h3 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo list &lt;<span class="built_in">type</span>&gt; </span><br></pre></td></tr></table></figure>

<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server </span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署到远程仓库"><a href="#部署到远程仓库" class="headerlink" title="部署到远程仓库"></a>部署到远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><ol>
<li>删除本地文章</li>
<li>删除.deploy_git文件</li>
<li>执行命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>安装插件：</p>
<p>在文章开头添加：<br>password: 密码<br>message: 请输入密码查看~<br>abstract: 文章暂未发布，敬请期待~</p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="图床设置"><a href="#图床设置" class="headerlink" title="图床设置"></a>图床设置</h2><p>pisco</p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>以下为使用的next主题配置的相关信息：<br>favicon 网站图标<br>menu    左边菜单栏<br>删除powered by :<br>在<code>themes/next/layout/_partials/footer.swig</code>中删除相关语句<br>浏览页面显示当前浏览进度:<br>打开 <code>themes/next/_config.yml</code>，搜索关键字 <code>scrollpercent</code>，把 false 改为 true。<br>启用Local Search本地搜索:<br>执行以下命令安装插件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>修改hexo&#x2F;_config.yml站点配置文件，新增以下内容到任意位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br><span class="line">limit: 10000</span><br></pre></td></tr></table></figure>

<p>编辑主题配置文件，启用本地搜索功能local_search：</p>
<hr>
<p>参考文章：</p>
<p><a href="https://www.cnblogs.com/huanhao/p/hexobase.html">基础学习</a><br><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p>
<p><a href="https://hexo.io/themes/">主题获取</a><br><a href="https://theme-next.js.org/docs/theme-settings/">主题配置文档</a><br><a href="https://theme-next.iissnan.com/">主题配置中文文档</a><br><a href="https://blog.csdn.net/as480133937/article/details/100138838">主题配置教程1</a><br><a href="https://blog.csdn.net/Fosu_Chenai/article/details/111155327?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171437600616800184134340%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171437600616800184134340&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-111155327-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=Hexo-Next&spm=1018.2226.3001.4187">主题配置教程2</a><br><a href="https://cs-cshi.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/">Next主题</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-note</title>
    <url>/2024/05/02/PHP-note/</url>
    <content><![CDATA[<p>PHP学习记录</p>
<span id="more"></span>
<p>视频：<a href="https://www.bilibili.com/video/BV18x411H7qD?p=3">https://www.bilibili.com/video/BV18x411H7qD?p=3</a></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>Web分为两类：静态网站和动态网站。流程:浏览器发起访问-&gt;DNS解析域名-&gt;服务器电脑-&gt;服务软件</p>
<h2 id="静态网站访问原理："><a href="#静态网站访问原理：" class="headerlink" title="静态网站访问原理："></a>静态网站访问原理：</h2><p><strong>必备工具</strong>：1、有两台电脑，PC（个人电脑），里面需要有浏览器；另外一台为服务器（需要有服务软件，假设为APACHE）,软件没有数据，故需在里面添加文件夹（准备访问的文件&#x2F;网页）2、下面蓝线代表两个在同一个互联网下。</p>
<p><strong>访问流程</strong>：1、在浏览器中需输入URL（uniformed resource location，统一资源定位，即互联网的绝对路径）；2、第一部需要经过URL的解析（DNS，DNS内部包含本地DNS与网络DNS，，访问本地DNS无需通过网络，可提高效率。如果本地DNS无法转化IP，就需要网络DNS）。3、DNS将转换后的IP地址返回给浏览器。4、浏览器通过IP地址找到服务器。5、（虽然找到了服务器，但服务器里面资源很多，如何找自己想要的APACH？）这就需要利用端口，APACHE的端口为80。6、访问APACHE后，即可找到要访问的内容（IP地址后的&#x2F;index.html也称为URI（uniformed resource identify，统一资源标志。目标机器上相对某个文件夹的相对路径，，，注&#x2F;即为根目录，相对根目录所以其为相对路径））.7、Apache根据URI读取文件，读取文件的内容（注意只是读取）。8、Apache读取文件后，返回结果。9、浏览器看之前，需要经过浏览器解析，才可展示给用户。（所有人访问的时候，都访问的一样的index文件，若要改变显示的信息，就需要改变index，比较麻烦）</p>
<h2 id="动态网站访问"><a href="#动态网站访问" class="headerlink" title="动态网站访问"></a>动态网站访问</h2><p>区别：相对静态网站访问多了几个步骤：需要服务器端解析；需要数据库</p>
<p>在访问内容时，Apache不能识别PHP（只能识别html），需通过PHP引擎读取PHP代码。读取PHP代码之后需要进行解析，解析过程中可能需要数据库。PHP引擎通过数据库，找到内容以后再返回给Apache。（注意，PHP引擎得到的内容是PHP代码，但交给Apache的是HTML内容，，，因为浏览器只能解析html文件）</p>
<h2 id="C-S、B-S"><a href="#C-S、B-S" class="headerlink" title="C&#x2F;S、B&#x2F;S"></a>C&#x2F;S、B&#x2F;S</h2><p><strong>软件设计结构</strong>：C&#x2F;S、B&#x2F;S</p>
<p>C&#x2F;S：Client客户端&#x2F;Server服务端，用户需要安装客户端产品才能访问服务器，且只能访问一种软件（自己的）</p>
<p>B&#x2F;S：Browser浏览器&#x2F;Server服务端，用户只需要安装浏览器，就可以访问所有的服务器（B&#x2F;S架构服务）。</p>
<h2 id="MySQL访问流程"><a href="#MySQL访问流程" class="headerlink" title="MySQL访问流程"></a>MySQL访问流程</h2><p>Mysql是一款C&#x2F;S架构的软件，需要通过客户端来访问服务端</p>
<p><strong>运行：</strong>1、启用MySQL客户端：mysqi.exe</p>
<p>2、mysql.exe通过cmd运行（安装配置环境变量后可这样运行）</p>
<p><strong>操作：</strong>由于qq服务器不在自己的电脑（即客户端与服务器可分离），故MySQL客户端访问服务器需进行寻找匹配：连接认证</p>
<p>a、连接：IP端口和确认。。。如果是本地，均可省略</p>
<p>命令：*-h 主机地址*      <em>-hlocalhost（或IP）</em>  localhost是主机名     <em>-P 端口 -P3306</em>（MySQL服务器的端口默认是3306）</p>
<p>b、认证：通过用户名和密码进入服务器。</p>
<p><em>-u 用户名     -uroot</em>（不可省略，匿名用户除外）      <em>-p 密码    -proot</em></p>
<p><strong>退出命令行：</strong>\q</p>
<p><strong>注意：</strong>通常连接认证的时候不建议密码明文，可在输入-p之后回车，系统会再次让输入密码，此时为密文。</p>
<h2 id="PHP连接MySQL数据库"><a href="#PHP连接MySQL数据库" class="headerlink" title="PHP连接MySQL数据库"></a>PHP连接MySQL数据库</h2><p>PHP本身不具备操作MySQL数据库的能力，需要借助MySQL扩展来实现。</p>
<p>1、PHP加载MySQL扩展：php.ini文件中。（不要用记事本打开）</p>
<p>2、PHP中所有扩展都是在ext的文件夹中，需要指定扩展所在路径：extension_dir。</p>
<p>3、php.ini已经被Apache重载，故需要重启才可。</p>
<h2 id="设定系统时区"><a href="#设定系统时区" class="headerlink" title="设定系统时区"></a>设定系统时区</h2><h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><p>一台服务器若只能部署一个网站，则非常浪费。故需通过其他渠道实现一台主机上部署多个网站。</p>
<p><strong>虚拟主机：</strong>Virtual machine，并不存在的主机，但可提供真实主机所实现的功能。虚拟主机是将计算机中不同的文件夹进行不同的命名，然后可实现让服务器（Apache）根据用户的需求从不同的文件夹（网站）中读取不同的内容。</p>
<p><strong>分类：</strong>在Apache中，可将虚拟主机划分为两类</p>
<p>1、基于IP的虚拟主机，一台电脑上有多个IP，每个IP对应一个网站。</p>
<p>原理：电脑默认只有一个IP，因为通常只有一个网卡，但有的电脑可配置多个网卡，每个网卡可绑定一个IP地址。</p>
<p>2、基于域名的虚拟主机：一台主机只有一个IP，但IP下课制作多个网站，但需给每个网站不同的名字。</p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="初步语法"><a href="#初步语法" class="headerlink" title="初步语法"></a>初步语法</h2><p>PHP是一种运行在服务器端的脚本语言，可以嵌入到HTML中。（HTML是通过浏览器解析，PHP是通过PHP引擎解析,那么嵌入到里面以后如何区分什么时候通过什么来解析？）</p>
<p><strong>PHP代码标记</strong>：可通过多种标记来区分PHP脚本</p>
<p>ASP标记  &lt;% php 代码 %&gt;；    短标记  <? Php 代码 ?>    以上两种基本弃用，如使用，需在配置文件中开启</p>
<p>脚本标记 ：也不经常用</p>
<p>标准标记：</p>
<p><strong>PHP注释：</strong>行注释：&#x2F;&#x2F;（双斜杠）或#          块注释：&#x2F;*     *&#x2F;</p>
<p><strong>PHP语句分隔符：</strong></p>
<p>1、在PHP中，代码以行为单位，系统需要通过判断行的结束，通常都用；表示结束。</p>
<p>注注注：PHP中标记结束符?&gt;有自带语句结束符的效果，最后一行PHP代码可以没有语句结束符。</p>
<p>2、PHP中代码的书写并不是全嵌入到HTML中，而是单独存在，所以可以不用标记结束符?&gt;</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>1、变量是用来存储数据的；                2、变量是存在名字的；</p>
<p>3、变量是通过名字访问数据的；        4、变量的数据是可以改变的。</p>
<h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p>1、定义：在系统中增加对应的变量名字（在内存中开发一块地）</p>
<p>2、赋值：将数据赋值给变量（在定义时直接初始化）</p>
<p>3、可通过变量名访问数据</p>
<p>4、变量可从内存中删除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义时不需要关键字，但必须使用$符号</span></span><br><span class="line"><span class="variable">$var1</span>;</span><br><span class="line"><span class="variable">$var2</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var2</span>;   <span class="comment">// 访问变量，通过变量名找到数据，并显示</span></span><br><span class="line"><span class="variable">$var2</span> = <span class="number">2</span>;        <span class="comment">// 修改变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,<span class="variable">$var2</span>;    <span class="comment">// hr/“ 为下划线，分隔符</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$var2</span>); <span class="comment">// 删除变量，从内存中剔除 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var2</span>;   <span class="comment">// 此时会报错，因为不存在变量</span></span><br></pre></td></tr></table></figure>

<h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><p>1、变量名字必须以”$”开头；</p>
<p>2、变量名可由数字、字母、下划线命名，但必须以字母和下划线开头</p>
<p>3、允许中文变量；</p>
<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p>即提前定义的变量，由系统定义的变量，存储许多要用到的数据（预定义变量都是数组）。</p>
<h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><p>如果一个变量保存的值刚好是另外一个变量的名字，则可直接通过访问一个变量得到另外一个变量的值：但需在变量前多加一个$符号</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span>;    <span class="comment">// a变量的内容正好是b变量的名称，故称a为可变变量</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>;    <span class="comment">// 使用时需加一个$符号</span></span><br></pre></td></tr></table></figure>

<h3 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h3><p>将一个变量赋值给另一个变量：值传递、引用传递</p>
<p>值传递：将变量保存的值复制一份，并将该值给另外一个变量保存(两个变量无关系)</p>
<p>引用传递：将变量保存值所在的内存地址传递给另外一个变量，两个变量同指一块内存（名字不一样而已）。</p>
<h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>注：c++中，栈区由编译器自动释放，存储局部变量和函数参数；代码区存放函数的二进制代码，由操作系统管理；全局区存放全局变量、静态变量、常量；堆区由程序员分配释放。</p>
<h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2.1 执行此行，在栈区开辟一块内存存储$a，在数据段中开辟一块内存保存值1。然后将1所在位置赋值给a变量</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;   </span><br><span class="line"><span class="comment">// 2.2 栈区开辟存储$b；发现是赋值运算，故会取出$a的值，</span></span><br><span class="line"><span class="comment">// 并在数据段重新开辟一块内存并保存，且再把新开辟地址赋值给栈区的变量b</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;   <span class="comment">// 值传递</span></span><br><span class="line"><span class="comment">// 2.3 执行该行</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>,<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>

<p>讲解运行步骤：</p>
<p>1、代码装载：从脚本文件中将代码读取出来，进行编译，将编译结果存放到代码段（二进制）。</p>
<p>2、代码执行：从代码段中一行一行执行代码。</p>
<p>3、脚本执行结束：系统会回收所有内存（栈区、代码区）：因为数据段与栈区有关系，回收栈后，数据段的内容无意义，相当于回收。</p>
<h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用传递</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1 执行此行，在栈区开辟一块内存存储$a，在数据段中开辟一块内存保存值1。然后将1所在位置赋值给a变量</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;   </span><br><span class="line"><span class="comment">// 2.2 栈区开辟存储$b；发现是引用运算，故会取出$a的地址，并将该地址给栈区的变量b</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;   <span class="comment">// 值传递</span></span><br><span class="line"><span class="comment">// 2.3 执行该行</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>,<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量与变量一样，均是用来保存数据的。</p>
<h3 id="常量的基本概念"><a href="#常量的基本概念" class="headerlink" title="常量的基本概念"></a>常量的基本概念</h3><p>const&#x2F;constant:是在程序运行中，不可改变的量（数据）；常量一旦定义，通常不可更改。</p>
<h3 id="常量定义的形式"><a href="#常量定义的形式" class="headerlink" title="常量定义的形式"></a>常量定义的形式</h3><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><p>1、使用定义常量的函数：define（’常量名’,常量值）——类似于c++的 #define</p>
<p>2、const</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 使用函数定义常量</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.1415</span>);   <span class="comment">// 注意此处与c++不同，#define 为预处理命令，宏定义，无需加；。。</span></span><br><span class="line"><span class="comment">// 使用const关键字定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI1</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义特殊常量</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;^-^&#x27;</span>,<span class="string">&#x27;smile&#x27;</span>);</span><br><span class="line"><span class="comment">// const ^-^   // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问常量</span></span><br><span class="line"><span class="keyword">echo</span> PI1;</span><br><span class="line"><span class="comment">// echo ^-^   // 报错</span></span><br><span class="line"><span class="title function_ invoke__">constant</span>(<span class="string">&#x27;^-^&#x27;</span>);  <span class="comment">// 特殊常量的访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统常量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,PHP_VERSION,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,PHP_INI_SIZE,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,PHP_INI_MAX;   <span class="comment">// 有符号整形</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 魔术常量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,<span class="keyword">__DIR__</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="keyword">__FILE__</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="keyword">__LINE__</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>;  <span class="comment">// 输出的行数会变</span></span><br></pre></td></tr></table></figure>

<h4 id="常量命名规则："><a href="#常量命名规则：" class="headerlink" title="常量命名规则："></a>常量命名规则：</h4><p>1、常量不需要使用”$”符号，一旦使用被认为是变量</p>
<p>2、变量名可由数字、字母、下划线命名，但必须以字母和下划线开头（const定义）</p>
<p>3、常量的名字通常是以大写字母为主（与变量以示区别）</p>
<p>4、变量命名的规则比变量要松散，可以使用一些特殊字符（define函数）</p>
<p>5、变量通常不区分大小写，但可以区分（define函数的第三个参数）</p>
<h3 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h3><p>魔术常量：由双下划线+常量名+双下划线组成，其值会随着环境变化而变化，用户无法改变。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型：data type，在PHP中指的是数据本身的类型，而不是变量的类型。PHP是一种弱类型语言，变量本身没有数据类型。</p>
<h3 id="PHP八大数据类型"><a href="#PHP八大数据类型" class="headerlink" title="PHP八大数据类型"></a>PHP八大数据类型</h3><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>很多情况需要指定数据类型，需要将外部数据类型（当前PHP获得的数据）转换成目标数据类型。</p>
<h4 id="两种转化方式："><a href="#两种转化方式：" class="headerlink" title="两种转化方式："></a>两种转化方式：</h4><p>1、自动转化：系统根据自己的需求判断，自己转化（用的较多、但效率较低）。</p>
<p>2、强制转换（手动）：在变量之前增加一个()，并在括号里面写上对于的类型，其中NULL特殊，需用unset。</p>
<h4 id="转换说明："><a href="#转换说明：" class="headerlink" title="转换说明："></a>转换说明：</h4><p>1、以字母开头的字符串，永远为0；</p>
<p>2、以数字开头的字符串，取到碰到字符串为止。（不会同时包含两个小数点）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 数据类型</span></span><br><span class="line"><span class="comment">// 创建数据</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;abcd1.1.1&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;1.1.1abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动转换。算术运算，系统先转化为数值类型，然后运算</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>+<span class="variable">$b</span>;  <span class="comment">//   结果为1.1（0+1.1）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制转换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>,(<span class="keyword">float</span>)<span class="variable">$a</span>,(<span class="keyword">float</span>)<span class="variable">$b</span>;  <span class="comment">// 01.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型判断</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_int</span>(<span class="variable">$a</span>));         <span class="comment">// bool(FALSE)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$a</span>));      <span class="comment">// bool(TRUE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据类型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettype</span>(<span class="variable">$a</span>);    <span class="comment">// string（虽然前面强制转换了，但并未改变本身）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置类型</span></span><br><span class="line"><span class="comment">// var_dump 输出展示展示代码内容，结构与类型。该函数作可以窥探所有内容的类型，以及内部信息</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">settype</span>(<span class="variable">$b</span>,<span class="string">&#x27;int&#x27;</span>));    <span class="comment">// 先将字符串转换为int型，转换成功返回true，var_dump判断是否为bool型，故显示                                 bool（true）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettype</span>(<span class="variable">$b</span>),<span class="variable">$b</span>;     <span class="comment">// interger1</span></span><br></pre></td></tr></table></figure>

<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">十进制转换二进制-----&gt;除以2</span></span><br><span class="line"><span class="comment">10  1010  注：不管结果ruhr，均需补足32位：00000000 00000000 00000000 00001010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php中提供了很多函数进行转换：</span></span><br><span class="line"><span class="comment">// Decbin():十进制转二进制</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">decbin</span>(<span class="number">107</span>));     <span class="comment">// 结果：string(7) &quot;1101011&quot;</span></span><br><span class="line"><span class="comment">// 同理，还有Decoct():十进制转八进制</span></span><br><span class="line"><span class="comment">// Dechex():十进制转十六进制</span></span><br><span class="line"><span class="comment">// Bindec():二进制转十进制</span></span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><p>问：为什么浮点数和整型均占用四个字节，为什么比整型表示的范围大？</p>
<p>整型数据的32位均通过*2转化为十进制。而浮点型中，前八位的后七位为指数，所以表示的范围要大。</p>
<p>另，实际使用时，尽量不用浮点型数字做精确判断，且计算机中凡是小数基本上均不准确。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数的定义</span></span><br><span class="line"><span class="variable">$f1</span> = <span class="number">1.23</span>;</span><br><span class="line"><span class="variable">$f2</span> = <span class="number">1.23e10</span>;</span><br><span class="line"><span class="variable">$f3</span> = PHP_INT_MAX+<span class="number">1</span>;   <span class="comment">// 若整型超过自身存储的大小之后会自动改为浮点型存储</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>,<span class="variable">$f3</span>);</span><br><span class="line"><span class="comment">// 结果：float(1.23)float(1.2300000000) float(214748348)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数判断</span></span><br><span class="line"><span class="variable">$f4</span> = <span class="number">0.7</span>;</span><br><span class="line"><span class="variable">$f5</span> = <span class="number">2.1</span>;</span><br><span class="line"><span class="variable">$f6</span> = <span class="variable">$f5</span>/<span class="number">3</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$f6</span> == <span class="variable">$f4</span>);      <span class="comment">// 结果：bool(false),,因此其不能进行精确判断</span></span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 运算符：是一种将数据进行运算的特殊符号，在PHP中一共有十多种运算符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 算术运算符   +-*/%</span></span><br><span class="line"><span class="comment">// 比较运算符   &gt; &gt;= &lt; &lt;= ==(数据大小相同即可，无需考虑数据数据类型) != ===(全等于，大小及数据类型均等) !==</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;123&#x27;</span>;  <span class="comment">// 字符串</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">123</span>;  <span class="comment">// 整型</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span> == <span class="variable">$b</span>);   <span class="comment">// 结果： bool(true)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span> === <span class="variable">$b</span>);   <span class="comment">// 结果： bool(false)   不全等于</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 逻辑运算符 &amp;&amp;(左边条件与右边条件同时成立) ||(有一个满足即可) !(取反)</span></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;weekend&#x27;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="string">&#x27;goods&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span> == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; <span class="variable">$d</span> == <span class="string">&#x27;good&#x27;</span>);   <span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span> == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; <span class="variable">$d</span> == <span class="string">&#x27;good&#x27;</span>);   <span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(!(<span class="variable">$c</span> == good);   <span class="comment">// bool(true)</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 连接运算符  .(将字符串连接一起)   .=(将左边内容与右边内容连接起来并重新赋值)</span></span><br><span class="line"><span class="variable">$e</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$f</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$e</span> . <span class="variable">$f</span>;   <span class="comment">// hello 123（注意，此处有强制类型转换）</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span> .= <span class="variable">$e</span>;      </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$e</span>;       <span class="comment">// hello 123</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">// 错误抑制符：@(可能出错的表达式)，在PHP中有一些错误可以提前预知，但又不想报错，这就需要错误抑制符。</span></span><br><span class="line"><span class="variable">$g</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$f</span> % <span class="variable">$g</span>;    <span class="comment">// 此时会报错</span></span><br><span class="line"><span class="keyword">echo</span> @(<span class="variable">$f</span> % <span class="variable">$g</span>); <span class="comment">// 不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三目运算符(问号表达式) 表达式1 ？ 表达式2：表达式3</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$g</span> ==<span class="number">0</span>?<span class="number">1</span>:<span class="number">2</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 自操作运算符 ++ --(前置或后置如果只有自操作，则效果一致)</span></span><br><span class="line"><span class="variable">$i</span> = <span class="variable">$g</span>++;    <span class="comment">// $g = 1;  $i = 0</span></span><br><span class="line"><span class="variable">$i</span> = ++<span class="variable">$g</span>;    <span class="comment">// $g = 2;  $i = 2;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算符</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	计算机码：计算机在实际存储数据时，采用的编码规则(二进制规则)</span></span><br><span class="line"><span class="comment">	计算机码：原码、反码和补码。数值本身最左边一位用来充当符号位：正数为0，负数为1；</span></span><br><span class="line"><span class="comment">	原码:数据本身从十进制转换成二进制得到的结果</span></span><br><span class="line"><span class="comment">	     正数，左符号位为0         负数：右符号位为1</span></span><br><span class="line"><span class="comment">	反码：针对负数，符号位不变，其他位取反。</span></span><br><span class="line"><span class="comment">	补码：针对负数，反码+1.（系统中存的为补码）</span></span><br><span class="line"><span class="comment">	以0为例，若是原码，则+0 = 00000000  -0 = 10000000；二者不一样</span></span><br><span class="line"><span class="comment">	         -0 反码 11111111   -0 补码 00000000   与+0一样（正数原码、补码、反码为其本身）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$j</span> = <span class="number">5</span>;      <span class="comment">// 原码：00000101</span></span><br><span class="line"><span class="variable">$k</span> = -<span class="number">5</span>;     <span class="comment">// 原码：10000101  反码：11111010  补码：11111011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算：取出计算机中最小的单位（bit）进行运算  &amp; | ~(按位取反) ^(按位异或) &gt;&gt;(右移) &lt;&lt;(左移)</span></span><br><span class="line"><span class="comment">// 注：1、系统进行位运算时，均是利用补码进行运算的     2、运算结束之后，必须转换为原码进行显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位取与         </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span> &amp; <span class="variable">$k</span>);    <span class="comment">// int(1)</span></span><br><span class="line"><span class="comment">/*    5  00000101</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">      &amp;  00000001  判断：符号位为0，正数，所存即为原码，无需操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位取反</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(~ <span class="variable">$k</span>);       <span class="comment">// int(4)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">      ~  00000100  正数即为原码，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 按位左移</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$k</span> &gt;&gt; <span class="number">1</span>)   <span class="comment">// int(-3)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$k</span> &gt;&gt; <span class="number">2</span>)   <span class="comment">// int(-2)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">    &gt;&gt;2  11111110(右移补符号位)</span></span><br><span class="line"><span class="comment">   反码  11111101(补码-1)</span></span><br><span class="line"><span class="comment">   原码  10000010(除符号位均取反)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 运算符优先级</span></span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><strong>分类</strong>：顺序结构、分支结构（if分支与switch分支）、循环结构</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分支结构——if分支</span></span><br><span class="line"><span class="variable">$day</span> = <span class="string">&#x27;星期天&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$day</span> == <span class="string">&#x27;星期1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;go out&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;work&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch 分支：同一条件下，有多个值，且每个值对应一种操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">switch(条件表达式)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    case 值1:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    case 值1:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    default:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环结构 for循环、while循环、Do-While循环、foreach循环（针对数组）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while  Do-while循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span> &lt;= <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环控制</span></span><br><span class="line"><span class="comment">// 1、中断控制：重新开始从头循环 continue(需求，输出1-100的5的倍数)  </span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span> &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span> % <span class="number">5</span> != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$i</span>++ ;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="流程控制替代语法"><a href="#流程控制替代语法" class="headerlink" title="流程控制替代语法"></a>流程控制替代语法</h3><p>上述书写中(tr 代表表格的一行，td代表表格的一列)，大括号很容易丢失，所以PHP有了一种替代机制，让其可以不用书写大括号。</p>
<p><em>for(;;){   &#x3D;&gt; :      }&#x3D;&gt;endfor;</em></p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>文件包含：在一个PHP脚本中，将另外一个文件包含进来，合作完成一件事情。</p>
<h3 id="文件包含作用"><a href="#文件包含作用" class="headerlink" title="文件包含作用"></a>文件包含作用</h3><p>1、要么使用被包含文件中的内容，实现代码共享，向上包含（索要）</p>
<p>2、要么自己的东西可被使用，向下包含（给予）：自己有某个东西需要别的脚本显示。</p>
<p>最大的作用是分工协作，共同完成一件事情。</p>
<h3 id="文件包含四种形式"><a href="#文件包含四种形式" class="headerlink" title="文件包含四种形式"></a>文件包含四种形式</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含文件：使用数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含文件：include  include_once(系统自动判断文件包含当中，是否已被包含过)  require  require_once</span></span><br><span class="line"><span class="comment">// 向上包含：使用已准备好的文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;include1.php&#x27;</span>;  <span class="comment">// 包含当前文件所在文件夹下的include1.php文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>,PI;              <span class="comment">// include1.php中已定义这个变量和常量，故可直接使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下包含：类似于调用了子函数</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;display.php&#x27;</span>;   <span class="comment">// 该文件中可输出a和PI</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件加载原理"><a href="#文件加载原理" class="headerlink" title="文件加载原理"></a>文件加载原理</h3><h4 id="PHP代码执行流程："><a href="#PHP代码执行流程：" class="headerlink" title="PHP代码执行流程："></a>PHP代码执行流程：</h4><p>1、读取代码文件（相当于PHP程序）；</p>
<p>2、编译：将PHP代码转化成字节码（二进制），生成opcode（php可解析的代码）；</p>
<p>3、针对引擎来解析opcode，按照细节码进行逻辑运算；</p>
<p>4    转化成对应的html代码。</p>
<p>1、在文件加载（include 或 require）时，系统会自动嵌入对应的include位置</p>
<p>2、在PHP中，被包含的文件是单独编译的。。</p>
<p>若编译过程中报错，则会失败，不执行。但若是被包含文件有错误，则系统执行到include语句时，才回报错。</p>
<h4 id="include-和-require区别"><a href="#include-和-require区别" class="headerlink" title="include 和 require区别"></a>include 和 require区别</h4><p>include会执行多次，导致报错（重复定义变量）。。而include_once不会出现这种情况。</p>
<p>require和include区别在于：若未包含文件，则报错形式不一样。（require包含错误文件，则include后不再执行；include未包含文件，会警告，但是仍会执行后面的。）</p>
<h3 id="文件加载路径"><a href="#文件加载路径" class="headerlink" title="文件加载路径"></a>文件加载路径</h3><p>文件加载时需指定文件路径，才能保证PHP正确找到对应的文件。</p>
<p>1、绝对路径（从磁盘根目录开始—本地绝对路径；从网站根目录开始—网络绝对路径–相对于&#x2F;的路径，，&#x2F;相当于绝对路径）</p>
<p>2、相对路径：从当前文件所在目录开始的路径。。.或者.&#x2F;表示当前文件夹。。..&#x2F;上级目录</p>
<p>绝对路径和相对路径加载区别：绝对路径相对效率偏低（因为要从跟目录开始找，但相对安全，路径固定）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 文件加载路径</span></span><br><span class="line"><span class="comment">// 相对路径加载(只供演示，不考虑多次加载)</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;include1.php&#x27;</span>;  <span class="comment">// 不写路径，默认在当前文件夹下</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;./include1.php&#x27;</span>; <span class="comment">// 另一种形式</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../hostdoc/include1.php&#x27;</span>;  <span class="comment">// ../代表当前文件夹的上一个文件夹，hostdoc为当前文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绝对路径</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;E:/server/apache/htdocs/include1.php&#x27;</span>;   <span class="comment">// 绝对路径，不会出错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h3><p><strong>嵌套包含容易出现相对路径出错的问题。</strong></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>将实现某一功能的代码块封装到一个结构中，从而实现代码的复用。</p>
<h3 id="函数定义语法（与c的差别在于可在任意位置调用子函数）"><a href="#函数定义语法（与c的差别在于可在任意位置调用子函数）" class="headerlink" title="函数定义语法（与c的差别在于可在任意位置调用子函数）"></a>函数定义语法（与c的差别在于可在任意位置调用子函数）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function 函数名(参数)&#123;</span></span><br><span class="line"><span class="comment">	函数体</span></span><br><span class="line"><span class="comment">	返回值</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="comment">// 1、函数不会自动运行，必须调用才可</span></span><br><span class="line"><span class="comment">// 2、代码执行阶段，遇到函数名字才回调用，不是在编译阶段</span></span><br><span class="line"><span class="comment">// 3、函数调用可在声明之前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;   <span class="comment">// 没有返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的调用（）</span></span><br><span class="line"><span class="title function_ invoke__">diaplay</span>();   <span class="comment">// 若函数有参数，则需加参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数命名规范：字母数字下划线、但不能数字开头。</span></span><br><span class="line"><span class="comment">// 一半遵循以下规则：1、驼峰法：除第一个单词外，其余首字母大写。showParent()   2、下划线方式</span></span><br><span class="line"><span class="comment">// 在一个脚本函数周期中，不允许出现同名函数。</span></span><br></pre></td></tr></table></figure>

<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数:定义函数时使用的参数，形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> arg1+arg2;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时使用的参数，实参</span></span><br><span class="line"><span class="variable">$num1</span> = <span class="number">10</span>;</span><br><span class="line"><span class="title function_ invoke__">add</span>(<span class="variable">$num1</span>,<span class="number">20</span>);  <span class="comment">// 1、实参个数可以多于形参（不能少于），只是函数不用而已  2、理论上实参个数没有限制</span></span><br><span class="line"><span class="comment">/* 调用过程：1、系统调用add函数时，会去内存中找是否有add函数</span></span><br><span class="line"><span class="comment">             2、系统在栈区开辟内存空间运行函数add</span></span><br><span class="line"><span class="comment">             3、系统查看函数本身是否有形参</span></span><br><span class="line"><span class="comment">             4、系统判断调用函数时是否有实参</span></span><br><span class="line"><span class="comment">             5、系统默认会将实参$num、20分别赋值给形参</span></span><br><span class="line"><span class="comment">             6、执行函数体、运行</span></span><br><span class="line"><span class="comment">             7、返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值：形参的默认值。。若调用时没有提供实参，则函数使用默认值执行函数</span></span><br><span class="line"><span class="comment">// 注：1、默认值定义时，应放在后边，不能左边有默认值，而右边没有</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moren</span>(<span class="params"><span class="variable">$num1</span> = <span class="number">0</span>,<span class="variable">$num2</span> =<span class="number">0</span></span>)  // 当前的<span class="title">num1</span>是形参，编译时不执行。且如果外部有同名子变量，也不会冲突</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$num1</span>-<span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述实参形参的传递相当于值传递，函数内部改变变量的内容，不会影响外面变量的内容</span></span><br><span class="line"><span class="comment">// 引用传递：可在函数内部改变外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yinyong</span>(<span class="params"><span class="variable">$a</span>,&amp;<span class="variable">$b</span></span>)   // 函数要的是地址，故将外部变量<span class="title">b</span>存储的地址取出赋值给了形参</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$b</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$a</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">5</span>;</span><br><span class="line"><span class="title function_ invoke__">yinyong</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);    <span class="comment">// 注意：此处不取地址..另，引用传递不可传入数字（常量中存储的不是地址）</span></span><br></pre></td></tr></table></figure>

<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><h3 id="作用域（与c差别在于全局变量不能直接被函数调用）"><a href="#作用域（与c差别在于全局变量不能直接被函数调用）" class="headerlink" title="作用域（与c差别在于全局变量不能直接被函数调用）"></a>作用域（与c差别在于全局变量不能直接被函数调用）</h3><p>作用域：通常是指变量可以被访问的区域。</p>
<p>在PHP中，作用域严格分为两种，以及内部定义的一种</p>
<p>1、全局变量：所属全局空间，在PHP中只允许在全局空间使用，函数内部不可用。（c++可使用）</p>
<p>2、局部变量：函数内部的变量</p>
<p>3、超全局变量：预定义变量（系统定义的）,没有访问限制，能够帮助局部去访问全局变量。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"></span><br><span class="line"><span class="comment">// php中作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的代码空间：全局空间</span></span><br><span class="line"><span class="variable">$global</span> = <span class="string">&#x27;global area&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量（函数内部定义）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$inner</span> = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$global</span>;   <span class="comment">// 函数内部不能访问全局变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转化为超全局变量，使得函数内部可以访问</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;global&#x27;</span>];  <span class="comment">// 这样可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">display</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>想在函数内部访问全局变量，可通过$GLOBALS，也可使用引用传值。</strong></p>
<p>另，还有一种方式既可从全局访问局部、也可从局部访问全局。即，<strong>global关键字</strong>：</p>
<p>1、若使用global定义的关键字在外部存在，那么系统在函数内部定义的变量直接指向外部变量所指向的内存空间（同一个变量）。</p>
<p>2、若其定义的变量在外部不存在，系统会自动在全局空间定义一个与局部变量同名的全局变量。</p>
<p>本质为：在函数的内部和外部，对一个同名变量使用同一块内存地址保存数据。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"></span><br><span class="line"><span class="comment">// global关键字的应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的代码空间：全局空间</span></span><br><span class="line"><span class="variable">$global</span> = <span class="string">&#x27;global area&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量（函数内部定义）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 访问全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$global</span>;   <span class="comment">// 函数内部不能访问全局变量</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 1、全局变量存在</span></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$global</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$global</span>;    <span class="comment">// 此时可以调用全局变量</span></span><br><span class="line">   <span class="comment">//2、全局变量不存在</span></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$local</span> = <span class="string">&#x27;inner&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$local</span>;   <span class="comment">// 访问局部变量</span></span><br><span class="line"><span class="title function_ invoke__">display</span>();</span><br></pre></td></tr></table></figure>

<h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>静态变量：static是在函数内部定义的变量，使用static关键字修饰，用来实现夸函数共享数据的变量（注：跨函数是指同个函数多次调用）。</p>
<p><strong>静态变量原理：系统在进行编译的时候，就已经对static这一行进行了初始化：即为静态变量赋值。。。而在执行时，会跳过初始化这一行。</strong></p>
<h3 id="可变函数（未写全）"><a href="#可变函数（未写全）" class="headerlink" title="可变函数（未写全）"></a>可变函数（未写全）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变函数:当前有一个变量所保存的值，刚好是一个函数的名字，那么就可以使用$变量()来充当函数名使用。</span></span><br><span class="line"><span class="comment">// 可变函数在使用系统函数时，需用户在外部定义一个自定义函数，但是需要传入到系统函数内部使用。</span></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="variable">$func</span> = <span class="string">&#x27;display&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变函数</span></span><br><span class="line"><span class="variable">$func</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数：没有名字的函数，</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义基本匿名函数</span></span><br><span class="line"><span class="comment">// function()  // 没有办法运行，故须加一个变量名字</span></span><br><span class="line"><span class="comment">// 变量保存匿名函数，本质得到的是一个对象（closure类中的对象）</span></span><br><span class="line"><span class="variable">$func</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;;         <span class="comment">// 因为相当于变量的赋值，所以需加一个分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用匿名函数</span></span><br><span class="line"><span class="variable">$func</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">闭包：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定地计算环境。（简单理解就是说，函数内部的一些局部变量即要执行的代码块，在执行完毕后没有被释放）。没有被释放的原因是：在函数内部，还有对应的函数被引用，通常为匿名函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$name</span> == <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义匿名函数</span></span><br><span class="line">    <span class="comment">// $innerfunction = function()// $name 相对于匿名函数来说是外部变量，故不能直接用</span></span><br><span class="line">    <span class="comment">// 1、使用匿名函数    2、使用关键字use</span></span><br><span class="line">    <span class="variable">$innerfunction</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$name</span></span>)  // <span class="keyword">use</span>就是将局部变量 保留给内部使用（形成了闭包，使<span class="title">display</span>运行完                                                毕后，不会被释放）</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$name</span>;     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$innerfunction</span>();  </span><br><span class="line">    <span class="comment">// 3、 匿名函数返回给外部使用</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="variable">$innerfunction</span>();    <span class="comment">// 为验证局部变量未被释放而返回</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$closure</span> = <span class="title function_ invoke__">display</span>();   <span class="comment">// 理论上此处局部变量被释放</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$closure</span>();   <span class="comment">// 结果却输出了name，说明上一行并未释放局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何证明局部变量在函数使用完之后没有被释放？（三步法）</span></span><br><span class="line"><span class="comment">// 1、使用内部匿名函数</span></span><br><span class="line"><span class="comment">// 2、匿名函数使用句变量：use</span></span><br><span class="line"><span class="comment">// 3、匿名函数返回给外部使用。</span></span><br></pre></td></tr></table></figure>

<h3 id="伪类型"><a href="#伪类型" class="headerlink" title="伪类型"></a>伪类型</h3><p>PHP中不存在的类型，只是为了方便查看操作手册。（可当作模板，只是为了泛化数据类型）</p>
<p>伪类型有两类:mixed混合的，只要是php中的类型即可；numbe数值的</p>
<h3 id="常用系统函数"><a href="#常用系统函数" class="headerlink" title="常用系统函数"></a>常用系统函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出相关</span></span><br><span class="line"><span class="comment">// print():类似于echo输出提供的内容，本质是一种结构（非函数），返回值为1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">print</span>(<span class="string">&#x27;hello lewao&#x27;</span>);   <span class="comment">// 输出hello world</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;hello lewao&#x27;</span>;         <span class="comment">// 输出1hello world（1为上一行echo的输出）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// print_r()：类似于var_dump，但不会输出数据类型，只会输出值，数组打印使用较多。</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="string">&#x27;hello&#x27;</span>);            <span class="comment">// 输出为hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间函数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">data</span>(<span class="string">&#x27;Y 年 m 月 d 日&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">time</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">microtime</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数学函数：  max()、rand():指定范围里的随机整数、round()：四舍五入、ceil():向上取整、floor()向下取整、pow(2,8):2的8次方、abs()：绝对值、sqrt()：求平方根</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有关函数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取指定参数</span></span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">func_get_arg</span>(<span class="number">1</span>));    <span class="comment">// 得到了第二个参数，结果为：string(1) &#x27;2&#x27;;</span></span><br><span class="line">    <span class="comment">// 获取所有参数:对应实参的个数</span></span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">func_get_args</span>());    <span class="comment">// array(4)&#123;   &#125;</span></span><br><span class="line">    <span class="comment">// 获取参数数量：对应实参的个数</span></span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">func_num_args</span>());    <span class="comment">// 参数数量 int(4)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用(如果存在的话，执行test)</span></span><br><span class="line"><span class="title function_ invoke__">function_exist</span>(<span class="string">&#x27;test&#x27;</span>) &amp;&amp; <span class="title function_ invoke__">test</span>(<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>错误处理：指系统或用户在对某些代码进行执行的时候，发现有错误，就会通过错误处理的形式告诉程序员。</p>
<h3 id="错误分类"><a href="#错误分类" class="headerlink" title="错误分类"></a>错误分类</h3><p>1、语法错误：书写代码不符合PHP语法规范，会导致代码在编译中不允许，故也不会执行（parse error）；</p>
<p>2、运行时错误：代码编译通过，但在执行时会出现一些条件不满足从而导致的错误。（runtime error取空数组的第几位数）</p>
<p>3、逻辑错误：写代码不规范、但逻辑性错误，导致虽可正常运行，但得不到预期结果。</p>
<h3 id="错误代号"><a href="#错误代号" class="headerlink" title="错误代号"></a>错误代号</h3><p>系统代号在PHP中均被定义为了系统常量，故可直接使用：</p>
<p>1、系统错误（系统使用的代号）：</p>
<p>E_PARSE：编译错误，代码不会运行</p>
<p>E_ERROR：fatal error致命错误，会在出错的位置断掉</p>
<p>E_WARNING：warning警告错误，不影响执行，但可能得不到预期结果</p>
<p>E_NOTICE：notice，通知错误、不影响代码执行</p>
<p>2、用户错误（用户使用的代号）：E_USER_ERROR、E_USER_WARNING、E_USER_NOTICE用户在使用自定义错误出发的时候，会使用道德错误代号。</p>
<p>3、E_ALL：代表所有错误</p>
<p>所有E开头的错误常量都由一个字节（8位）存储，且每一种错误占用一个位，故可进行位操作。</p>
<p>排除通知级别notice：E_ALL &amp; ~E_NOTICE 。。假设ALL全为1，那么与NOTICE取反再取与就可把其剔除</p>
<p>只要警告和同志：E_WARNING | E_NOTICE</p>
<h3 id="错误触发"><a href="#错误触发" class="headerlink" title="错误触发"></a>错误触发</h3><p>程序运行时触发：主要针对代码的语法错误和运行时错误。</p>
<p>人为触发：知道某些逻辑可能会出错，从而使用对应的代码编号来判断</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php错误处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 人为触发</span></span><br><span class="line"><span class="comment">// 处理脚本让浏览器按照指定字符集解析</span></span><br><span class="line"><span class="comment">// header(&#x27;Content-type:text/html;charset=utf-8&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">trigger_error</span>(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> / <span class="variable">$b</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="错误显示设置（未全）"><a href="#错误显示设置（未全）" class="headerlink" title="错误显示设置（未全）"></a>错误显示设置（未全）</h3><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><h3 id="字符串定义语法"><a href="#字符串定义语法" class="headerlink" title="字符串定义语法"></a>字符串定义语法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//php字符串：定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、引号定义:比较适合定义较短的或无结构要求的字符串</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$str1</span>,<span class="variable">$str2</span>);  <span class="comment">// 两种方式显示的结果一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构化定义</span></span><br><span class="line"><span class="comment">// 2、heredoc字符串：没有单引号的单引号字符串</span></span><br><span class="line"><span class="variable">$str3</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">          HELLO</span></span><br><span class="line"><span class="string">          EOD</span>;</span><br><span class="line"><span class="comment">// 3、nowdoc 结构</span></span><br><span class="line"><span class="variable">$str4</span> = &lt;&lt;&lt;<span class="string">&#x27;EOD&#x27;</span>   <span class="comment">// eod只是边界符，可自己定义</span></span><br><span class="line">           hello</span><br><span class="line">EOD;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$str3</span>,<span class="variable">$str4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h3><p>字符串转义：在计算机通用协议中，有一些特定方式定义的字母，系统会特定处理；反斜杠+字母<br>&#39;:在单引号字符串中显示单引号  &quot; 在双引号字符串中显示双引号  \r：回车  \n：换行  \t:四个空格  $<br>**区别:**上述转义符中，单引号只能识别&#39;。而双引号中不能识别&#39;；</p>
<p>双引号中变量识别规则：</p>
<p>1、变量本身系统能够与后面的内容区分；即应该保证变量的独立性，不要使系统难以识别。</p>
<p>2、使用变量专业标识符，即给变量加一组{}；</p>
<p>结构化字符串变量的规则</p>
<p>1、结构化定义字符串对应的边界符有条件</p>
<p>1.1 上边界符和后面不能有任何东西（包括注释）</p>
<p>1.2 下边界符必须顶格</p>
<p>1.3 下边界符后面只能跟分号</p>
<p>2、结构化定义字符串内部均是字符串本身（包括空格、换行、注释等）</p>
<h3 id="字符串长度问题"><a href="#字符串长度问题" class="headerlink" title="字符串长度问题"></a>字符串长度问题</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset = utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义字符串</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;abcefjdoifaoi&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&#x27;你好中国123&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>);  <span class="comment">// 13   15(中文在utf下占3个字节)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多字节字符串的长度问题：包含中文的长度</span></span><br><span class="line"><span class="comment">// 多字节字符串扩展模块：mbstring扩展(mb:Multi Bytes)</span></span><br><span class="line"><span class="comment">// 首先需加载PHP的mbstring扩展（php.ini中去注释即可）</span></span><br><span class="line"><span class="comment">// 使用mbstring</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$str1</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$str2</span>);  <span class="comment">// 13   15(与之前一致) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度并未改变，MBstring针对不同的字符集有不同的统计结果</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$str1</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$str2</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="title function_ invoke__">mb_string</span>(<span class="variable">$str2</span>,<span class="string">&#x27;utf-8&#x27;</span>);  <span class="comment">// 13   15   7</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><h2 id="数组（元素下标均和c-不一样）"><a href="#数组（元素下标均和c-不一样）" class="headerlink" title="数组（元素下标均和c++不一样）"></a>数组（元素下标均和c++不一样）</h2><p>数组：数据的组合，指将一组数据（多个）存储到一个指定的容器中，并用变量指向该容器，然后可用变量一次性取得该容器的所有数据。</p>
<h3 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php数组：可以是一种或多种类型的数据，这与c++很不一样.类似于哈希表</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义数组：array</span></span><br><span class="line"><span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr1</span>);    <span class="comment">// 结果：// array(3) ([0]=&gt;string(1) &quot;1&quot; [1]=&gt;int(2) [2]=&gt;string(5) &quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组：[]</span></span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr2</span>);   <span class="comment">// array(3) ([0]=&gt;string(1) &quot;1&quot; [1]=&gt;int(2) [2]=&gt;string(5) &quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组：隐型数组  </span></span><br><span class="line"><span class="variable">$arr3</span>[] = <span class="number">1</span>;      <span class="comment">// 默认给数组第0个元素赋值</span></span><br><span class="line"><span class="variable">$arr3</span>[<span class="number">10</span>] = <span class="number">100</span>;  <span class="comment">// 第10个元素赋值</span></span><br><span class="line"><span class="variable">$arr3</span>[] = <span class="string">&#x27;1&#x27;</span>;    <span class="comment">// 第11个。默认下标是从当前最大下标</span></span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;key&#x27;</span>;  <span class="comment">// 第key个</span></span><br><span class="line"><span class="variable">$arr</span>[<span class="number">1</span>] = <span class="string">&#x27;value&#x27;</span>  <span class="comment">// 第1个，但不会自动调整，还是会处于最后一个位置</span></span><br><span class="line"><span class="comment">// 结果为：array(4) ([0]=&gt;int(1) [10]=&gt;int(100) [11]=&gt;string(1) &quot;1&quot; [&quot;key&quot;]=&gt;string(3)&quot;key&quot; [1]=&gt;string(5) &quot;value&quot;)</span></span><br></pre></td></tr></table></figure>

<h3 id="PHP数组特点"><a href="#PHP数组特点" class="headerlink" title="PHP数组特点"></a>PHP数组特点</h3><p>1、可以整数下标或者字符串下标</p>
<p>若数组下标均为整数，则称为<strong>索引数组</strong></p>
<p>若数组下标均为字符串，则称为<strong>关联数组</strong>。</p>
<p>混合下标的话称为<strong>混合数组</strong></p>
<p>2、数组元素的顺序以放入顺序为准，与下标无关</p>
<p>3、数字下标的增长特性：从0开始自动增长，若中间手动加入较大的下标，则后面则会从当前最大下标+1增长。</p>
<p>4、特殊值下标的自动转换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊下标自动转换</span></span><br><span class="line"><span class="variable">$arr1</span>[<span class="literal">false</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$arr1</span>[<span class="literal">true</span>] = <span class="literal">true</span>;</span><br><span class="line">arr1[<span class="literal">NULL</span>] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr1</span>);   <span class="comment">// array(3)([0]=&gt;bool(false),[1]=&gt;bool(true) [&quot;&quot;]-&gt;NULL)</span></span><br></pre></td></tr></table></figure>

<p>5、PHP数组中类型元素没有限制。</p>
<p>6、PHP中数组元素没有长度限制。c++ vector</p>
<p>补充：PHP中数组是很大的数据，故会存储在堆区。</p>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><h4 id="Foreach语法"><a href="#Foreach语法" class="headerlink" title="Foreach语法"></a>Foreach语法</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 数组遍历  foreach</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$a</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;    <span class="comment">// 依次输出1，2，3，4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$a</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key&#x27;</span>,<span class="variable">$a</span>,<span class="string">&#x27;== value&#x27;</span>,<span class="variable">$v</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;    <span class="comment">// 依次输出key0 == value1  等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt;<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">10</span>),</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Jim&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过foreach遍历二维元素</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$a</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;name is:&#x27;</span>,<span class="variable">$a</span>[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;age is:&#x27;</span>,<span class="variable">$a</span>[<span class="string">&#x27;age&#x27;</span>],<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">// name is:TOM age is:10</span></span><br><span class="line">    <span class="comment">// name is:TOM age is:10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="foreach遍历原理"><a href="#foreach遍历原理" class="headerlink" title="foreach遍历原理"></a>foreach遍历原理</h4><h4 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a>for循环遍历</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// for循环遍历数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组特点：1、索引数组   2、下标规律</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key is:&#x27;</span>,<span class="variable">$i</span>,<span class="string">&#x27;value is:&#x27;</span>,<span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="while配合each和list遍历数组"><a href="#while配合each和list遍历数组" class="headerlink" title="while配合each和list遍历数组"></a>while配合each和list遍历数组</h4><p>由于不存在下标1，而list只能从0开始依次查找，故上述会报错。</p>
<h3 id="数组相关的函数"><a href="#数组相关的函数" class="headerlink" title="数组相关的函数"></a>数组相关的函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序函数</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">sort</span>(<span class="variable">$arr</span>))  <span class="comment">// 结果为1</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);     <span class="comment">// 排序后，索引变为01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针函数 reset:将数组的内部指针指向第一个单元；end():将数组指针指向最后一个元素；</span></span><br><span class="line"><span class="comment">// next():     prev():指针上移   current():获取当前指针对应的元素值    key()获取当前指针对应的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否指针移动</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">current</span>(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">key</span>(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;  <span class="comment">//若是第一个元素。则当前数组指针未移动</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">next</span>(<span class="variable">$arr</span>),<span class="title function_ invoke__">next</span>(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;  <span class="comment">//15</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">prev</span>(<span class="variable">$arr</span>);<span class="comment">//1</span></span><br><span class="line"><span class="comment">// 注意事项：next，prev会移动指针，可能导致超出数组，此时再使用next、prev便不能再返回数组，只能通过end/reset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他函数：count</span></span><br></pre></td></tr></table></figure>



<h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><h3 id="递推算法"><a href="#递推算法" class="headerlink" title="递推算法"></a>递推算法</h3><p>利用特定关系得出中间推论，直至得到结果的算法。。。分为顺推和逆推两种</p>
<p>顺推:通过最简单的条件，逐步推演结果。</p>
<p>逆推，通过结果找到规律，从而推到已知条件。</p>
<h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><p>把问题转化为规模缩小了的同类问题的子问题。然后递归调用函数以表达问题的解。</p>
<p><strong>简化问题，找到最优子问题。</strong></p>
<p>递归的本质是函数调用：一个函数需要开辟一块内存，递归会出现同时调用多个函数，故占用很多内存。</p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>1、比较相邻元素，若前一个比后一个大，则交换。</p>
<p>2、对每一对相邻元素进行1操作，直至最后一对。此时最后一个因为最大值。</p>
<p>3、除最后一个外，重复以上操作</p>
<p>4、重复以上操作，直至排序完成。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">// 计算长度</span></span><br><span class="line"><span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$len</span>-<span class="number">1</span>;<span class="variable">$i</span>++)    <span class="comment">// 第几次重复循环</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="variable">$len</span>-<span class="variable">$i</span>-<span class="number">1</span>;<span class="variable">$j</span>++)  <span class="comment">// 第几次交换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>])</span><br><span class="line">            <span class="title function_ invoke__">swap1</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>],<span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;<span class="variable">$a</span>,&amp;<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>1、假设第一个元素为最小元素，记下下标</p>
<p>2、寻找右侧剩余元素，若有更小的，则记下更小的下标</p>
<p>3、一行对比完成后，交换第一个和最小的元素</p>
<p>4、重新开始以上操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable">$min_index</span> = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line"><span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$len</span>-<span class="number">1</span>; <span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$min_index</span> = <span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$min_index</span> + <span class="number">1</span>;<span class="variable">$j</span>&lt;<span class="variable">$len</span>;<span class="variable">$j</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$min_index</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$j</span>])</span><br><span class="line">            <span class="variable">$min_index</span> = <span class="variable">$j</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$min_index</span> != <span class="variable">$i</span>)</span><br><span class="line">    	<span class="title function_ invoke__">swap1</span>(<span class="variable">$arr</span>[<span class="variable">$min_index</span>],<span class="variable">$arr</span>[<span class="variable">$i</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;<span class="variable">$a</span>,&amp;<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>1、认定一个第一个元素已经排好序；</p>
<p>2、取出第二个元素作为待插入元素；</p>
<p>3、将待插入元素与已排好元素比较；</p>
<p>4、若小于已排好元素，则说明前面排序未在正确位置，应该向后移动，让新元素插入进去</p>
<p>5、重复以上操作，直到该元素插入完毕</p>
<p>6、重复操作，直至所有元素完毕</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$len</span>;<span class="variable">$i</span>++)   <span class="comment">// 第几个元素为待插入元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$i</span>;<span class="variable">$j</span>&gt;<span class="number">0</span>;<span class="variable">$j</span>--)  <span class="comment">// 比较几次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$tmp</span> &lt; <span class="variable">$arr</span>[<span class="variable">$j</span>-<span class="number">1</span>])    <span class="comment">// 注意此处比较的是tmp</span></span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>] != <span class="variable">$tmp</span>)</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$j</span>] =<span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;<span class="variable">$a</span>,&amp;<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序法："><a href="#快速排序法：" class="headerlink" title="快速排序法："></a>快速排序法：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组开头及结尾</span></span><br><span class="line"><span class="variable">$start</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$end</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>)-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数作为递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归出口</span></span><br><span class="line">    <span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$len</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 比较并分散数据</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="variable">$right</span> = <span class="keyword">array</span>();  <span class="comment">// 定义空数组用于存放大的或小的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$len</span>;<span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$i</span>]&gt;<span class="variable">$arr</span>[<span class="number">0</span>]) <span class="variable">$right</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];   <span class="comment">// 大于存放在右边数组</span></span><br><span class="line">        <span class="keyword">else</span> <span class="variable">$left</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];   <span class="comment">// 小于存放在左边数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="title function_ invoke__">quick_sort</span>(<span class="variable">$left</span>);  <span class="comment">// 分别将右数组和左数组进一步排序</span></span><br><span class="line">    <span class="variable">$right</span> = <span class="title function_ invoke__">quick_sort</span>(<span class="variable">$right</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_merge</span>(<span class="variable">$left</span>,(<span class="keyword">array</span>)<span class="variable">$arr</span>[<span class="number">0</span>],<span class="variable">$right</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">quick_sort</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);   <span class="comment">// 不能用echo</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 快排双指针</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归结束条件</span></span><br><span class="line">    <span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$len</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义双指针</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$right</span> = <span class="variable">$len</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="variable">$pivot</span> = <span class="variable">$arr</span>[<span class="number">0</span>];  <span class="comment">// 确定基准</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$left</span> &lt; <span class="variable">$right</span>)   <span class="comment">// left == right时跳出循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$right</span>] &gt;= <span class="variable">$pivot</span>) <span class="variable">$right</span>--;</span><br><span class="line">		<span class="keyword">while</span>(<span class="variable">$left</span> &lt; <span class="variable">$right</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$left</span>] &lt;= <span class="variable">$pivot</span>) <span class="variable">$left</span>++;</span><br><span class="line">		<span class="title function_ invoke__">swap1</span>(<span class="variable">$arr</span>[<span class="variable">$left</span>],<span class="variable">$arr</span>[<span class="variable">$right</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">swap1</span>(<span class="variable">$arr</span>[<span class="variable">$left</span>],<span class="variable">$arr</span>[<span class="number">0</span>]);   <span class="comment">// 跳出循环时，left = right ，故将pivot赋值即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归点(上述操作完毕后，需要进一步排序左边和右边，故需递归)</span></span><br><span class="line">    <span class="variable">$left_arr</span> = <span class="title function_ invoke__">quick_sort</span>(<span class="title function_ invoke__">array_slice</span>(<span class="variable">$arr</span>,<span class="number">0</span>,<span class="variable">$left</span>));</span><br><span class="line">    <span class="variable">$right_arr</span> = <span class="title function_ invoke__">quick_sort</span>(<span class="title function_ invoke__">array_slice</span>(<span class="variable">$arr</span>,<span class="variable">$left</span>+<span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_merge</span>(<span class="variable">$left_arr</span>,(<span class="keyword">array</span>)<span class="variable">$arr</span>[<span class="variable">$left</span>],<span class="variable">$right_arr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">quick_sort</span>(<span class="variable">$arr</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;<span class="variable">$a</span>,&amp;<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二路合并算法</span></span><br><span class="line"><span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="variable">$arr2</span> = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="keyword">array</span>();    <span class="comment">// 存合并后的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$arr1</span>) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$arr2</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$res</span>[] = <span class="variable">$arr1</span>[<span class="number">0</span>]&gt;<span class="variable">$arr2</span>[<span class="number">0</span>] ? <span class="title function_ invoke__">array_shift</span>(<span class="variable">$arr2</span>):<span class="title function_ invoke__">array_shift</span>(<span class="variable">$arr1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$arr1</span>) &amp;&amp; !<span class="title function_ invoke__">count</span>(<span class="variable">$arr2</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$res</span>[] = <span class="title function_ invoke__">array_shift</span>(<span class="variable">$arr1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$arr2</span>) &amp;&amp; !<span class="title function_ invoke__">count</span>(<span class="variable">$arr1</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$res</span>[] = <span class="title function_ invoke__">array_shift</span>(<span class="variable">$arr2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>

<p>1、将数组拆分成两个数组</p>
<p>2、重复步骤1，将数组拆分成最小单元</p>
<p>3、然后二路归并</p>
<p>4、重复步骤直至完成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 1、递归结束条件</span></span><br><span class="line">    <span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$len</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、重复的操作</span></span><br><span class="line">    <span class="comment">// 2、1 拆分数组</span></span><br><span class="line">    <span class="variable">$middle</span> = <span class="variable">$len</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="variable">$left</span> = <span class="title function_ invoke__">array_slice</span>(<span class="variable">$arr</span>,<span class="number">0</span>,<span class="variable">$middle</span>);</span><br><span class="line">    <span class="variable">$right</span> = <span class="title function_ invoke__">array_slice</span>(<span class="variable">$arr</span>,<span class="variable">$middle</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4、递归点（最后写这一步，先将一层的分离和合并写完，再找递归点）</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="title function_ invoke__">merge_sort</span>(<span class="variable">$left</span>);</span><br><span class="line">    <span class="variable">$right</span> = <span class="title function_ invoke__">merge_sort</span>(<span class="variable">$right</span>);</span><br><span class="line">    <span class="comment">// 2、2 二路归并</span></span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">array</span>();    <span class="comment">// 存合并后的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$left</span>) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$right</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$res</span>[] = <span class="variable">$left</span>[<span class="number">0</span>]&gt;<span class="variable">$right</span>[<span class="number">0</span>] ? <span class="title function_ invoke__">array_shift</span>(<span class="variable">$right</span>):<span class="title function_ invoke__">array_shift</span>(<span class="variable">$left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$left</span>) &amp;&amp; !<span class="title function_ invoke__">count</span>(<span class="variable">$right</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$res</span>[] = <span class="title function_ invoke__">array_shift</span>(<span class="variable">$left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$right</span>) &amp;&amp; !<span class="title function_ invoke__">count</span>(<span class="variable">$left</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$res</span>[] = <span class="title function_ invoke__">array_shift</span>(<span class="variable">$right</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_merge</span>(<span class="variable">$res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">merge_sort</span>(<span class="variable">$arr</span>));</span><br></pre></td></tr></table></figure>

<h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">32</span>);</span><br><span class="line"><span class="comment">// 顺序查找：从数组第一个元素开始挨个匹配</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_index</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$v</span> == <span class="variable">$num</span>) <span class="keyword">return</span> <span class="variable">$k</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var_dump(find_index($arr,2));  // 不存在，故返回bool(false)</span></span><br><span class="line"><span class="comment">// var_dump(find_index($arr,32));  // 存在，故返回int(5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Binary_search</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$right</span> = <span class="variable">$len</span>-<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$left</span> &lt;= <span class="variable">$right</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$middle</span> = <span class="variable">$left</span>+(<span class="variable">$right</span>-<span class="variable">$left</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$middle</span>] &gt; <span class="variable">$num</span>) </span><br><span class="line">			<span class="variable">$right</span> = <span class="variable">$middle</span>-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">elseif</span>(<span class="variable">$arr</span>[<span class="variable">$middle</span>] &lt; <span class="variable">$num</span>) </span><br><span class="line">			<span class="variable">$left</span> = <span class="variable">$middle</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$middle</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">Binary_search</span>(<span class="variable">$arr</span>,<span class="number">6</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">Binary_search</span>(<span class="variable">$arr</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
        <category>Language</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>经典缓冲区溢出实验1~6</title>
    <url>/2024/05/07/%E7%BB%8F%E5%85%B8%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E5%AE%9E%E9%AA%8C1-6/</url>
    <content><![CDATA[<p>buffer overflow 漏洞利用实践。</p>
<span id="more"></span>
<h1 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h1><h2 id="实验名称"><a href="#实验名称" class="headerlink" title="实验名称"></a>实验名称</h2><p>buffer overflow 漏洞利用实践。</p>
<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>编写 exploits 攻击漏洞程序，获取具有root权限的shell</p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>【操作系统】</p>
<p>Ubuntu16.04.07 LTS 32bit</p>
<p>内核：4.15.0-112-generic</p>
<p>【软件版本】</p>
<p>gcc: 5.4.0</p>
<p>make: 4.1</p>
<h2 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h2><p>本次实验参考了</p>
<p><a href="https://www.cnblogs.com/lqerio/p/12870943.html">https://www.cnblogs.com/lqerio/p/12870943.html</a></p>
<p><a href="https://blog.csdn.net/qq_36779888/article/details/89684621?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_36779888/article/details/89684621?spm=1001.2014.3001.5502</a></p>
<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p><strong>2.1.1 下载安装gdb-peda，prelink</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br><span class="line">$ sudo echo &quot;source ~/peda/peda.py&quot; &gt;&gt;~/.gdbinit</span><br><span class="line">$ sudo apt-get install prelink</span><br></pre></td></tr></table></figure>
<p>以后所有操作均在root用户下进行<br><strong>2.1.2 关闭保护机制</strong></p>
<p>取消地址随机化(以下为临时关闭，重启会失效)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure>
<p>同时在编译时设置相应参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-fno-stack-protector：禁用堆栈溢出保护</span><br><span class="line">-z execstack：关闭数据溢出保护</span><br></pre></td></tr></table></figure>
<p>2.1.3 安装漏洞程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulnerables</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><strong>2.1.3 分析shellcode构造</strong></p>
<p>编写shellcode C代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">char *buf [] = &#123;&quot;/bin/sh&quot;,NULL&#125;;</span><br><span class="line">void main()&#123;</span><br><span class="line">    execve(&quot;/bin/sh&quot;,buf,0);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>gcc编译后成功弹出shell:<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508200353.png" alt="20240508200353"></p>
<p>对编译的二进制程序使用objdump反汇编</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objdump -d shellcode \&gt; shellcode.S</span><br></pre></td></tr></table></figure>
<p>可见其对应汇编代码,编写汇编代码如下：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508200607.png" alt="20240508200607"><br>编译链接运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nasm -f elf32 shellcode.asm -o shellcode.o</span><br><span class="line">ld -m elf_i386 -o shellcode shellcode.o</span><br><span class="line">./shellcode</span><br></pre></td></tr></table></figure>

<p>使用如下命令获取shellcode对应机器码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in $(objdump -d shellcode | grep &quot;^&quot; | cut -f2 ); do echo -n &#x27;\x&#x27;$i;done;</span><br></pre></td></tr></table></figure>
<p>得到对应机器码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\x31\\xc9\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x31\\xc0\\xb0\\x0b\\xcd\\x80</span><br></pre></td></tr></table></figure>
<p>构造如下C程序test.c验证机器码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">void(*shellcode)();</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char * code[]=&quot;\\x31\\xc9\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x31\\xc0\\xb0\\x0b\\xcd\\x80&quot;;</span><br><span class="line">    shellcode=(void(*)()) code;</span><br><span class="line">    shellcode();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译时关闭数据溢出保护和堆栈溢出保护<br>执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -fno-stack-protector -z execstack</span><br><span class="line">./test</span><br></pre></td></tr></table></figure>

<p>成功弹出shell,说明机器码正确。<br>同时，查询到构造shell还有另一方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static const char shellcode[] =</span><br><span class="line">&quot;\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\xb0\\x0b&quot;</span><br><span class="line">&quot;\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd&quot;</span><br><span class="line">&quot;\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh&quot;;</span><br></pre></td></tr></table></figure>

<p>同样编写程序验证，可成功引发shell。第一种方法使用了<code>execve(&quot;/bin/sh&quot;, [&quot;/bin/sh&quot;, NULL], NULL)</code> 调用来执行 <code>/bin/sh</code>，通过栈来设置参数，实验过程中发现在构造vul2的exploit2时，会导致vul2的buf数组起始位置发生变化，而第二种方法通过寄存器设置参数，可以避免此问题，两种构造shell的机器码均记录下来，分别存储为<code>shllcode1.h</code>（第一种方法）,<code>shellcode.h</code>（第二种方法）</p>
<h2 id="漏洞程序一"><a href="#漏洞程序一" class="headerlink" title="漏洞程序一"></a>漏洞程序一</h2><p><strong>2.2.1 漏洞分析</strong></p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508201625.png" alt="20240508201625"><br>分析：</p>
<p>bar 函数中使用 strcpy 函数将 arg 拷贝到 out 中，这里的 out 是一个局部数组，大小为 256 字节。但strcpy 函数不会检查目标数组的大小，而是简单地将源字符串复制到目标地址，这可能导致缓冲区溢出：如果参数 arg 的长度超过了 out 的大小（256 字节），strcpy 将继续写入超出缓冲区 out 的部分，导致栈上的其他数据被覆盖。这种情况就是经典的栈溢出漏洞，因为溢出的数据会覆盖函数调用栈中重要的数据，如返回地址和函数参数，从而可能影响程序的控制流程和执行。同时，调用bar函数的foo 函数接受命令行参数 argv，并将 argv[1] 作为参数传递给 bar 函数，其中 argv[1] 是 main 函数中的命令行参数 argv 的第二个元素。这意味着，如果在命令行中提供的参数超过了程序预期的范围，就会导致 bar 函数试图将过长的字符串复制到 buf 中，从而造成缓冲区溢出。</p>
<p>foo函数栈帧如下，当写入264字节时第261-264字节会覆盖原有返回地址。</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>数据</th>
</tr>
</thead>
<tbody><tr>
<td>0xbffffd54</td>
<td>return address</td>
</tr>
<tr>
<td>0xbffffd50</td>
<td>main’s ebp</td>
</tr>
<tr>
<td>0xbffffd4c</td>
<td>buf[255]</td>
</tr>
<tr>
<td>...</td>
<td>…</td>
</tr>
<tr>
<td>0xbffffd54</td>
<td>buf[0]</td>
</tr>
</tbody></table>
<p><strong>2.2.2 构造payload</strong></p>
<p>根据上述漏洞原理，构造payload，向buf中写入264字节的数据引起溢出，其中260~263为新的返回地址，即为写入shellcode机器码的开始地址，如下构造程序：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508202822.png" alt="20240508202822"><br>为避免图片无法显示，重要代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">#include&quot;shellcode.h&quot;</span><br><span class="line">...</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int return_addr = 0x00000000;</span><br><span class="line">    char payload[264];</span><br><span class="line">    emcpy(payload,shellcode,strlen(shellcode));</span><br><span class="line">    for(int i= strlen(shellcode);i&lt;260;i++&gt;)</span><br><span class="line">    payload[i]=0x90;</span><br><span class="line">    memcpy(&amp;payload[260],&amp;return_addr,4);</span><br><span class="line">    char *argv[]=&#123;TARGET,payload,NULL&#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc exploit1.c -o exploit1 -fno-stack-protector -z execstack</span><br></pre></td></tr></table></figure>
<p>调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb -e ./exploiy1 -s /tmp/vul1 –directory=../vulnerables</span><br></pre></td></tr></table></figure>
<p>开始调试后，依次执行以下调试命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catch exec</span><br><span class="line">r</span><br><span class="line">b foo</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<p>进入调试后，使用<code>catch exec</code>命令，是程序由exploit1通过execve执行vul1时中断，便于调试;执行vul1后，在foo函数下断点，以便找到buf数组起始位置从而判断返回地址;<br>使用指令<code>x/1xw buf</code>可见buf起始地址，使用此地址替换上述的0x00000000：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508202732.png" alt="20240508202732"><br>再次编译，重复上述操作，确认buf起始地址没有发生改变，由此payload构造成功。</p>
<p>使用<code>gcc exploit1.c -o exploit1 -fno-stack-protector -z execstack</code>编译后执行，成功获取具有root权限的shell：</p>
<h2 id="漏洞程序二"><a href="#漏洞程序二" class="headerlink" title="漏洞程序二"></a>漏洞程序二</h2><p><strong>2.3.1 漏洞分析</strong></p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508203331.png" alt="20240508203331"></p>
<p>程序vul2与vul1非常相似，但限制了拷贝的字符串的长度，使得不会出现通过缓冲区溢出直接覆盖返回地址的情况，但其在确认字符串长度时使用了&lt;&#x3D;符号，导致字符串拷贝时可能多复制一个字节，这样我们就可以修改bar栈帧中的old ebp，也就是调用它的foo函数的ebp的最后一个字节。回到foo函数后执行leave指令（相当于mov esp,ebp pop ebp两条指令）时将被修改后的ebp传给esp，若此时esp+4指向shellcode的地址，那么执行ret指令时我们就能成功跳转至shellcode机器码所在位置从而获取shell.<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508203425.png" alt="20240508203425"><br>总体过程描述大致如下图<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508203404.png" alt="20240508203404"><br><strong>2.3.2 构造payload</strong></p>
<p>根据上述原理，首先在gdb中调试获取buf的地址：</p>
<p>调试vul2，使用命令<code>disas foo</code>反汇编foo函数，获取bar函数地址为0x804851a，如图20240508203425所示。<br>构造一个200字节的payload并编译exploit2.c。使用<code>gdb -e exploit2 -s /tmp/vul2</code>联合调试，在bar函数处下断点，打印ebp和buf值</p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508203635.png" alt="20240508203635"><br>调试命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catch exec</span><br><span class="line">r</span><br><span class="line">b *0x0804851a</span><br><span class="line">c</span><br><span class="line">p $edp</span><br><span class="line">p &amp;buf</span><br></pre></td></tr></table></figure>
<p>得到&amp;buf&#x3D;0xbffffcb8,因此获取到buf范围是0xbffffcb8-0xbffffd80共200字节, ebp为0xbffffd8c, 如果覆盖掉ebp最后一字节为00，改变ebp为0xbffffd00，那么ret存放地址应当为0xbffffd04-0xbffffd08，注意是小端存储。D04-cb8&#x3D;4c&#x3D;76字节。<br>编写程序，构造数组：<br>在此过程中曾使用第一种shell构造方法，但实验过程中发现buf数组地址总是发生变化，经查询发现第一种方法通过栈来设置参数，推测可能是使用的栈导致了vul2的内存空间被占用，网上查询到第二种方法，如上文所述存在shellcode.h中，最终程序编写如下</p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508203826.png" alt="20240508203826"><br>编译运行，成功获取具有root的权限的shell。</p>
<h2 id="漏洞程序三"><a href="#漏洞程序三" class="headerlink" title="漏洞程序三"></a>漏洞程序三</h2><p><strong>2.4.1 漏洞分析</strong><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508203931.png" alt="20240508203931"><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508203919.png" alt="20240508203919"><br>程序输入为整数count和字符串in。采用了if判断语句来防止溢出，存在的漏洞主要是当count为一个足够小的负数时，可以满足 if 的条件进入memcpy函数，而memcpy接受的内存长度类型为size_t，在32位中即为unsigned int，共计4字节（32位），可以表示的最大值是 2^32 – 1&#x3D;4,294,967,295，其函数原型如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void * memcpy(</span><br><span class="line">    void* _Dst,void const* _Src,size_t _Size</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>当负数足够小时，负数*sizeof(widget_t)可能溢出产生正数。故要对vul3栈溢出攻击只需要构造合适的负数count产生溢出和字符串in覆盖buf，然后覆盖ebp，ret即可。由程序代码可知widget_t结构体占4字节，buf数组占用20*1000&#x3D;20000字节，若count*20&gt;20000即可导致数组越界，因此count的4字节32位二进制中除去第一位符号位为1外剩余位应当&gt;&#x3D;1001&#x3D;0b001111101001，因此传入的count的二进制可为0b 1000 0000 0000 0000 0000 0011 1110 1001，计算机中负数以补码存储，对应为0b 0111 1111 1111 1111 1111 1100 0001 0111，其对应十进制为-2,147,484,649。buf大小为20000字节，故返回地址在20004~20008字节处。覆盖该地址内存为buf的起始地址，然后buf覆盖为shellcode即可。</p>
<p><strong>2.4.2 构造payload</strong></p>
<p>类似方法获取buf起始地址为0xbfff61f0,得到buf基址 0xbfffa220<br>编写程序，构造数组：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508204222.png" alt="20240508204222"><br>使用命令<code>gcc -o exploit3 exploit3.c -z execstack -fno-stack-protector</code>编译运行,成功获取具有root权限shell</p>
<h2 id="漏洞程序四"><a href="#漏洞程序四" class="headerlink" title="漏洞程序四"></a>漏洞程序四</h2><p><strong>2.5.1 漏洞分析</strong></p>
<p>1、源码及其依赖项分析</p>
<p>1.1 源码分析<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508214646.png" alt="20240508214646"></p>
<p>由上述代码可见foo函数的执行逻辑顺序为:</p>
<p>p&#x3D;tmalloc(500) q&#x3D;tmalloc(300) tfree(p) tfree(q) p&#x3D;tmalloc(1024) tfree(q)</p>
<p>可知为q申请了一次内存但使用tfree了两次，由于申请的内存已经在第一次tfree，第二次tfree会释放一个不存在的空间，导致出错，该漏洞属于堆溢出漏洞。因此，tfree很可能是我们可以利用的地方。</p>
<p>1.2 库文件“tmalloc.h”对应“tmalloc.c”文件分析：</p>
<p>分析其结构体与宏定义，可知，CHUNK结构体占8个字节（前4个字节为左指针，后4个字节为右指针，分别指向前后的块位置）在块的r指针的低位部分存储块的状态，1为空闲，0为占用。</p>
<p>tmalloc函数和tfree函数：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508214809.png" alt="20240508214809"><br>可以总结tmalloc函数的执行过程如下：<br>首先，tmalloc 函数接收一个参数 nbytes，表示需要分配的内存大小（以字节为单位）。如果内存分配器尚未初始化（即 bot 为 NULL），则会调用 init() 函数进行初始化。init()函数会把bot（arena数组第一个）设为空闲块，top（arena数组最后一个）设为占用块。然后根据传入的字节数 nbytes 计算需要的以块为单位进行内存分配的内存大小 size。从链表的起始位置 bot 开始，内存分配器遍历空闲块链表，寻找一个大小大于等于 size 的空闲块（当前块为空闲且其右块与当前块之间的空间大于等于size）。如果找到了合适大小的空闲块 p，则将其标记为占用状态（调用 CLR_FREEBIT(p) 函数），表示该块已经被分配出去。如果找到的空闲块大小大于 size，则会创建一个新的空闲块来存放剩余的空间（）（top左指针指向空闲块尾，空闲块尾右指针指向top，空闲块尾左指针指向空闲块首，空闲块首右指针指向空闲块尾）。最后返回分配的内存块的首地址给调用者。</p>
<p>tfree函数的执行过程如下：<br>首先检查 vp 是否为 NULL，如果是，则直接返回，因为无需释放任何内存。然后使用 TOCHUNK 宏将指针 vp 转换为其对应的内存块头部指针 p。使用 CLR_FREEBIT 宏清除块 p 的空闲位，即将其标记为占用状态。然后尝试合并左空闲块（按图1即向上空闲块合并）：首先获取 p 的左边相邻块 q，如果 q 不为空且是空闲的，则尝试与其合并。使用 CLR_FREEBIT 宏清除块 q 的空闲位。更新合并后的块 q 的右指针指向 p 的右指针所指向的块。更新 p 右指针所指向的块的左指针指向合并后的块 q。使用 SET_FREEBIT 宏设置块 q 的空闲位。更新当前处理的块指针 p 为合并后的块 q。然后尝试向右合并空闲块，原理类似，最后使用 SET_FREEBIT 宏设置块 p 的空闲位，表示该块现在是空闲的。这样，tfree函数完成了对给定内存块的释放，并尝试将其与相邻的空闲块合并，以减少内存碎片化。</p>
<p>结合vul4.c和tmallo.c，我们可以分析出，第一次为p使用tmalloc申请了500字节，（由于CHUNK数组一个8字节，按块分配内存，实际分配了504字节），然后为q申请了300字节（实际分配304字节，q也就指向第504字节所在地址），然后分别释放申请的空间，此时虽然块被标记为空闲，但实际上p,q仍指向原位置。之后再分配了1024字节给p,因为504+304&lt;1024,因此q也就指向p所分配中某一块的地方，如下所示：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508214849.png" alt="20240508214849"></p>
<p>因此我们就可以给q所指的地方赋值，又根据tfree的原理，第二次释放q时，若我们在赋值q所指的地方时将其左指针设置为我们想要返回的地址，右指针设置为存储返回地址的地址，即foo函数的返回地址存储的地址。需要注意的是，与左节点合并必须满足左节点空闲，即左指针的第 5 位（左指针的右指针的低位，对应下图中q0-&gt;s.r）应该是奇数。当使用tfree时，语句p0s.rs.l&#x3D;q0，也就是相当于将q的右指针所指地址（也就是存储返回地址的地址）的前四字节（即其右指针）替换为q的左指针（也就是设置的返回地址）。</p>
<p>注意，上文提到的q指的是vul4.c中的q,而q0指的是tmalloc.c中的q,p,p0同理。<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508214919.png" alt="20240508214919"></p>
<p><strong>2.5.2 构造payload</strong></p>
<p>1、确定shellcode地址（p所指内存地址）；</p>
<p>反汇编foo函数，在最后一个tfree的汇编代码处下断点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b *0x0804862e</span><br><span class="line">c</span><br><span class="line">p p</span><br></pre></td></tr></table></figure>
<p>得到指针p指向的内存地址<code>0x804a068</code><br>将shellcode设置为p起始地址偏移32字节处，便于后续操作</p>
<p>2、确定返回地址所在的内存地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p $ebp</span><br></pre></td></tr></table></figure>
<p>获得栈底指针寄存器 ebp 的值为<code>0xbffffa4c</code><br>其上四字节即返回地址所在地，即<code>0xbffffa50</code></p>
<p>3、获取q所指地址0x804a268：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p q</span><br></pre></td></tr></table></figure>
<p>重新调试，在第三个tmalloc前下断点，可见覆盖前q堆首值:<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215250.png" alt="20240508215250"></p>
<p>可见其左指针指向p堆的堆首。</p>
<p>4、构造payload</p>
<p>上面提到将shellcode设置为p起始地址偏移32字节处，这是因为tfree时与左节点合并必须满足左节点空闲，即左指针的第 5 位（左指针的右指针的低位，对应下图中q0-&gt;s.r）应该是奇数，而shellcode第五位是0x76，不满足。<br>因此我们将q的左指针指向 p 的起始数据区域，同时将其 5~8 个字节赋值为 0xffffffff。但0xffffffff无法对应指令，当从p 的起始数据区域开始执行时到此处会出错，我们可以使用jmp指令跳过这部分区域，jmp指令对应机器码为\xeb，使用\xeb08跳过8字节偏移来跳过这部分。因此最后构造如下payload:<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215323.png" alt="20240508215323"><br>编译运行,成功</p>
<h2 id="漏洞程序五"><a href="#漏洞程序五" class="headerlink" title="漏洞程序五"></a>漏洞程序五</h2><p><strong>2.6.1 漏洞分析</strong></p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215336.png" alt="20240508215336"><br>该程序存在由错误使用snprintf函数导致的格式化字符串漏洞，snprintf函数的功能是根据指定的 format 字符串将格式化数据写入到 str 缓冲区中，并根据 size 控制写入的字符数。查看其函数原型，可见，在函数定义中，其恰当的用法应当是当format中包含若干格式化指示符时，其后应该再加相同数量的参数以对应格式化指示符，但原程序中使用snprintf(buf, sizeof buf, arg);时，只有一个参数，且用户可以控制输入的内容，这就可能导致安全性问题。当用户的输入包含格式化字符串控制符时（如 %s、%n 等），snprintf找不到其对应的参数，但它不会意识到这一点，而是会继续尝试从堆栈中读取相应的数据，从而读取到错误的内存数据（越过了它能读取的边界）。恶意用户就可以精心构造输入文件，插入了类似 %x、%s 的格式化字符串，从而导致程序崩溃或者泄漏敏感信息。更严重的情况下，攻击者可能通过 %n 格式化字符串控制符修改内存中的数据，引发潜在的安全问题。<br>在理解程序存在的漏洞之后，我们还需要回顾一些c语言语法，已知：<br>a. 在C语言中可以通过%Ns(d&#x2F;x&#x2F;p&#x2F;f等)来控制输出多少位，例如%2u可以输出2位无符号10进制数，因此使用%133u可以输出133位10进制数。<br>b. 在C99中，%n是一个格式说明符，主要用于 printf 和 sprintf 等函数。它的作用是将到目前为止写入（或读取）的字符数存储到一个 int 类型的变量中。例如语句printf(“aaaaa%n”, &amp;count);printf(“%d\n”, count);的结果是：aaaaa5<br><strong>由此可以总结触发漏洞过程如下：</strong></p>
<p><em>当构造的输入为</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char payload[400] = </span><br><span class="line"> &quot;\xff\xff\xff\xff\x2c\xdb\xff\xff&quot;</span><br><span class="line"> &quot;%29u%n&quot;;</span><br></pre></td></tr></table></figure>
<p>时，程序执行到<code>snprintf(buf, sizeof buf, arg); </code>由于实际提供的参数比指示符要求的参数少，snprintf将尝试读取未定义的内存。在这种情况下，snprintf函数会试图读取额外的4字节，这样就读取了0xffff ffff，并将其视为无符号整数来打印, 然后读取到指示符%n时，会再向下读取4字节，即0xffffdb2c，并将其视为需要将输出字符数写入的地址，从而导致了3D被写入到内存0xffff bd2c中。通过这种方法，我们即可实现向任意内存写入数据，假如我们找到了snprintf函数的返回地址，并将其修改为shellcode的起始地址，就能使其返回错误的地址从而成功获取shell</p>
<p><strong>2.6.2 构造payload</strong></p>
<p>构造如下输入以调试获取buf及其他数据地址：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215600.png" alt="20240508215600"><br>编译，使用如下命令调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb -e exploit5 -s /tmp/vul4</span><br><span class="line">catch exec</span><br><span class="line">r</span><br><span class="line">b foo</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<p>使用<code>disas foo，disas snprintf</code>命令反汇编foo snprintf函数，并通过<code>p \$ebp, x/xw buf</code>等指令调试，获取buf起始地址和栈帧结构,并根据以上汇编指令和buf起始地址，可以推断栈帧结构如下：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215741.png" alt="20240508215741"></p>
<p>可见snprintf()函数的返回地址储存在0xbfffffb2c处，同时，由于以下构造：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char payload[400] = </span><br><span class="line"> &quot;\xff\xff\xff\xff\x2c\xdb\xff\xff&quot;</span><br><span class="line"> &quot;%29u%n&quot;;</span><br></pre></td></tr></table></figure>
<p>会不断修改buf中的数值，所以我们不能像前几次一样将返回地址修改为buf数组的地址，而是将其修改为arg数组的地址，通过命令x&#x2F;xw查询到arg数组起始地址为0xbffffe61：<br>同时，由于构造输入的前数十个字节需要用于存储如图1的构造，我们不能将shellcode存储在arg数组起始处，可以存储在+96字节(0xbffffec1)处，并把返回地址设置为+80字节(0xbffffeb1)处（80字节已经足够容纳以上数据，且空余字节通过\x90填充，对应nop指令，不影响程序），从而构造以下payload<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215840.png" alt="20240508215840"></p>
<p>编译运行，没有出现预期结果，gdb调试，发现增加的c语言语句导致程序地址发生变化，重新构造payload如下<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215914.png" alt="20240508215914"></p>
<p>编译运行，成功获取具有root权限的shell</p>
<h2 id="漏洞程序六"><a href="#漏洞程序六" class="headerlink" title="漏洞程序六"></a>漏洞程序六</h2><p><strong>2.7.1 漏洞分析</strong><br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215934.png" alt="20240508215934"><br>vul6与vul2类似，也是可能导致一个字节的缓冲区溢出，但在执行foo函数后直接退出（exit(0)），因此无法使用vul2的构造方法，需要设法绕过此函数。exit()函数的汇编代码如下：</p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508215959.png" alt="20240508215959"></p>
<p>其在执行时第一条指令是jmp指令，若能修改其目标地址，则可跳转至我们想要跳转的地方。<br>由漏洞程序2可知，通过nstrcpy()函数可以修改foo函数ebp的值，而查看汇编代码可知变量p与a的位置是根据ebp决定的因此存在修改指针p指向地址空间的值的可能性。<br>结合vul2推断其栈帧结构大致如下：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508220041.png" alt="20240508220041"><br>进一步分析汇编代码，在执行bar()函数后执行*p&#x3D;a时，其对应汇编指令如下：<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508220200.png" alt="20240508220200"><br>也就相当于将ebp-0x8位置的数据复制到ebp-0x4的位置，若我们修改ebp指向buf数组中某一位置，从而使得ebp-0x8指向buf数组中某一数值，该数值定为jmp指令的目标地址存储的地方,根据上文exit函数反汇编代码可知为0x0804a00c，并使得ebp-0x4指向的地址中存储shellcode的开始地址，最终可以实现使用shellcode的开始地址替换jmp指令的目标地址，从而获取shell.</p>
<p><strong>2.7.2 构造payload</strong></p>
<p>根据上述原理，首先获取foo函数ebp和buf起始地址，ebp&#x3D;0xbffffe4c;&amp;buf&#x3D;0xbffffd70<br>若将ebp修改为0xbffffe00,则其与buf起始地址的偏移为0xe00-0xd70&#x3D;144<br>则ebp-0x8对应0xbffffdf8,偏移136，将其设置为buf起始地址0xbffffe00, ebp-0x4对应0xbffffdfc,偏移140,将其设置为0x0804a00c<br>如下构造payload<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508220209.png" alt="20240508220209"><br>编译，由于原本获取的是以“hi there”为输入的ebp,buf，因此再次调试获取buf起始地址和ebp&#x3D;0xbffffd8c,&amp;buf&#x3D;0xbffffcb0<br>得到偏移0xd00-0xcb0-0x08 &#x3D;80-8&#x3D;72修改payload，如下：</p>
<p><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508220326.png" alt="20240508220326"><br>编译运行，成功获取具有root权限shell<br>至此，全部实验成功<br><img src="https://raw.githubusercontent.com/Fushiye/Alldocuments/main/img_blog/20240508220335.png" alt="20240508220335"></p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>git-note</title>
    <url>/2024/05/03/git-note/</url>
    <content><![CDATA[<h2 id="常见git命令参考"><a href="#常见git命令参考" class="headerlink" title="常见git命令参考"></a>常见git命令<br><span id="more"></span><br><a href="https://zhuanlan.zhihu.com/p/402325945">参考</a></h2><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="git-help-帮助"><a href="#git-help-帮助" class="headerlink" title="git help 帮助"></a>git help 帮助</h2><p>Git中有许多命令，如果你需要其他命令的帮助，则可以随时在终端上使用git help。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git help &lt;git_command&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-config-身份与Email"><a href="#git-config-身份与Email" class="headerlink" title="git config 身份与Email"></a>git config 身份与Email</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your name&quot;  </span><br><span class="line">$ git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure>
<h2 id="git-version-版本"><a href="#git-version-版本" class="headerlink" title="git version 版本"></a>git version 版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git version</span><br></pre></td></tr></table></figure>
<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>在当前文件夹创建空白或指定名称的存储库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git init &lt;your repository name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-clone-复制"><a href="#git-clone-复制" class="headerlink" title="git clone 复制"></a>git clone 复制</h2><p>git clone命令将使用现有的存储库进行复制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt; [directory]</span><br></pre></td></tr></table></figure>
<h2 id="git-add-添加到存储库"><a href="#git-add-添加到存储库" class="headerlink" title="git add 添加到存储库"></a>git add 添加到存储库</h2><p>git add命令会把所有新的代码文件或修改后的文件中。此命令提供了添加文件和文件夹的不同选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//将单个文件添加到暂存区</span><br><span class="line">$ git add your_file_name</span><br><span class="line">//此选项会将所有修改过的文件和新文件添加到暂存区</span><br><span class="line">$ git add *</span><br></pre></td></tr></table></figure>
<h2 id="git-commit-将更改添加到本地存储库"><a href="#git-commit-将更改添加到本地存储库" class="headerlink" title="git commit 将更改添加到本地存储库"></a>git commit 将更改添加到本地存储库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;your useful commit message&quot;</span><br></pre></td></tr></table></figure>
<p>git add 是将文件添加到暂存区的操作，而 git commit 是将暂存区的内容提交到本地仓库的操作。通过此方法使得可以选择性地将部分文件或更改提交到本地仓库，或在意识到某些更改不应该被提交，可以在提交之前将其移除或修改，而不会影响到已经提交的历史记录</p>
<h2 id="git-status-查看相关文件的状态"><a href="#git-status-查看相关文件的状态" class="headerlink" title="git status 查看相关文件的状态"></a>git status 查看相关文件的状态</h2><p>此命令可以用来在git add和git commit之间查看状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<h2 id="git-branch-分支操作"><a href="#git-branch-分支操作" class="headerlink" title="git branch 分支操作"></a>git branch 分支操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//列出所有分支：</span><br><span class="line">$ git branch</span><br><span class="line">//创建新的分支：</span><br><span class="line">$ git branch &lt;branch_name&gt;</span><br><span class="line">//删除分支：</span><br><span class="line">$ git branch -d &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-checkout-切换分支"><a href="#git-checkout-切换分支" class="headerlink" title="git checkout 切换分支"></a>git checkout 切换分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//切换到另一个分支</span><br><span class="line">$ git checkout &lt;branch_name&gt;</span><br><span class="line">//创建并转移到分支</span><br><span class="line">$ git checkout -b &lt;your_new_branch_name&gt;</span><br></pre></td></tr></table></figure>
<h1 id="中级Git命令"><a href="#中级Git命令" class="headerlink" title="中级Git命令"></a>中级Git命令</h1><h2 id="git-remote-添加远程仓库"><a href="#git-remote-添加远程仓库" class="headerlink" title="git remote 添加远程仓库"></a>git remote 添加远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add &lt;shortname&gt; &lt;url&gt;</span><br><span class="line">$ git remote -v  //查看当前的默认远程仓库和分支</span><br></pre></td></tr></table></figure>
<p>举例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://dev.azure.com/aCompiler/_git/DemoProject</span><br></pre></td></tr></table></figure>
<h2 id="git-push-推送到远程仓库"><a href="#git-push-推送到远程仓库" class="headerlink" title="git push 推送到远程仓库"></a>git push 推送到远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>
<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//将当前分支推送到origin主机的对应分支。</span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure>
<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<h2 id="git-push-–set-upstream"><a href="#git-push-–set-upstream" class="headerlink" title="git push –set-upstream"></a>git push –set-upstream</h2><p>设置好origin和upstream。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push --set-upstream &lt;short_name&gt; &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-fetch-下载有关提交、引用等的所有信息"><a href="#git-fetch-下载有关提交、引用等的所有信息" class="headerlink" title="git fetch 下载有关提交、引用等的所有信息"></a>git fetch 下载有关提交、引用等的所有信息</h2><p>从远程仓库获取最新提交的命令，但它不会自动将获取到的提交合并到本地分支中。相反，它将更新远程仓库的引用，让你能够查看远程仓库的最新状态，然后决定是否需要合并这些更改到你的本地分支中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-pull-下载内容"><a href="#git-pull-下载内容" class="headerlink" title="git pull 下载内容"></a>git pull 下载内容</h2><p>从远程仓库获取最新提交，并将它们合并到当前分支中.相当于git fetch 和 git merge 这两个步骤的组合操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull &lt;remote_url&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>暂存当前工作目录中的修改，使得你可以在不提交更改的情况下切换到其他分支或者进行其他操作。当你需要在当前分支上开始新的工作，但又不想提交或者清理掉正在进行中的修改时，git stash 就可以派上用场。执行 git stash 命令会执行以下操作：</p>
<ol>
<li>将工作目录中未暂存的修改（即尚未添加到暂存区的修改）暂存起来。</li>
<li>清空工作目录中的修改，使得它变为干净的状态，就像刚刚执行完 git add 一样。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">//查看所有stash</span><br><span class="line">$ git stash list</span><br><span class="line">//再次应用之前暂存的修改</span><br><span class="line">$ git stash apply</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="git-log-查看当前分支的提交历史"><a href="#git-log-查看当前分支的提交历史" class="headerlink" title="git log 查看当前分支的提交历史"></a>git log 查看当前分支的提交历史</h2><p>显示提交历史中的每个提交（commit），包括提交作者、提交日期、提交信息等信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure>
<p>可选参数</p>
<blockquote>
<p>–oneline：以一行的形式显示提交历史，只显示提交哈希值和提交信息。<br>–graph：在提交历史的输出中添加 ASCII 图形表示的分支合并情况。<br>–author&#x3D;&lt;author&gt;：只显示指定作者（提交者）的提交历史。<br>–since&#x3D;&lt;date&gt;：只显示指定日期之后的提交历史。<br>–until&#x3D;&lt;date&gt;：只显示指定日期之前的提交历史</p>
</blockquote>
<h2 id="git-shortlog"><a href="#git-shortlog" class="headerlink" title="git shortlog"></a>git shortlog</h2><p>git shortlog命令会显示来自git log命令的摘要。如果你只对简短的摘要感兴趣，那么此命令就非常有用了。<br>这个命令有助于查看谁处理了什么，因为它对作者及其提交进行了分组。</p>
<h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h2><p>与git log相比，此命令将显示有关特定提交的详细信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git show &lt;your_commit_hash&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-rm-删除文件"><a href="#git-rm-删除文件" class="headerlink" title="git rm 删除文件"></a>git rm 删除文件</h2><p>从当前工作目录和暂存区中删除文件。与普通的文件删除不同，git rm 命令会将删除操作记录到 Git 的历史记录中，这样可以确保删除操作被跟踪并记录下来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;your_file_name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-merge-合并分支"><a href="#git-merge-合并分支" class="headerlink" title="git merge 合并分支"></a>git merge 合并分支</h2><p>git merge可帮助将来自两个分支的更改集成到单个分支中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
<p>此命令会将<branch_name>合并到当前分支中。</p>
<h1 id="高级Git命令"><a href="#高级Git命令" class="headerlink" title="高级Git命令"></a>高级Git命令</h1><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>git rebase类似于git merge命令。它把两个分支集成到一个分支中，但有一个不一样的地方：git rebase命令将会重写提交记录。<br>当你有多个私有分支合并到单个分支时，应使用git rebase命令。它将使得提交历史成为线性的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rebase &lt;base&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-bisect"><a href="#git-bisect" class="headerlink" title="git bisect"></a>git bisect</h2><p>git bisect命令可帮助查找糟糕的提交。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 启动git bisect</span><br><span class="line">$ git bisect start</span><br><span class="line">// 让git bisect知道什么是好的提交</span><br><span class="line">$ git bisect good a123</span><br><span class="line">//让git bisect知道什么是糟糕的提交</span><br><span class="line">$ git bisect bad z123</span><br></pre></td></tr></table></figure>
<p>通过git bisect，只要几分钟你就可以缩小问题代码的范围。</p>
<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>git cherry-pick是一个蛮有用的命令，允许你从任意分支中选择任意提交并将其应用于其他任意分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure>
<p>git cherry-pick不会修改存储库的历史记录；相反，它会添加到历史记录。</p>
<h2 id="git-archive"><a href="#git-archive" class="headerlink" title="git archive"></a>git archive</h2><p>git archive命令会把多个文件合并为单个文件。就好像zip实用程序一样，所以你可以提取存档文件以获取单个文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git archive --format zip HEAD &gt; archive-HEAD.zip</span><br></pre></td></tr></table></figure>
<p>它将创建当前修订的zip存档。</p>
<h2 id="git-pull-–rebase"><a href="#git-pull-–rebase" class="headerlink" title="git pull –rebase"></a>git pull –rebase</h2><p>在大多数情况下，当你使用git pull时，你需要重新设置基准（并且不进行合并）。<br>此时，你就可以使用此选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull --rebase</span><br></pre></td></tr></table></figure>
<p>这将帮助保持干净的历史记录。另外，还可以避免多次合并。</p>
<h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h2><p>如果你需要逐行检查任意文件的内容，则需要使用git blame命令。它可以帮助确定是谁对文件进行了更改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git blame &lt;your_file_name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>在Git中，标签很有用，你可以使用它们来管理发布。你可以将git tag视为不会改变的分支。尤其是要公开发布的时候，则更为重要了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -a v1.0.0</span><br></pre></td></tr></table></figure>
<h2 id="git-verify-commit"><a href="#git-verify-commit" class="headerlink" title="git verify-commit"></a>git verify-commit</h2><p>git verify-commit命令将检查gpg签名。GPG，GNU Privacy Guard，是sign文件中使用的工具，包含签名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git verify-commit &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-verify-tag"><a href="#git-verify-tag" class="headerlink" title="git verify-tag"></a>git verify-tag</h2><p>可以以同样的方式确认标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git verify-tag &lt;tag&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>大多数情况下，在提交或推送之前，你需要比较两个git文件或分支。用这个命令就方便多了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i）将工作目录与本地存储库进行比较：</span><br><span class="line">$ git diff HEAD &lt;filename&gt;</span><br><span class="line">ii）比较两个分支：</span><br><span class="line">$ git diff &lt;source branch&gt; &lt;target branch&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-citool"><a href="#git-citool" class="headerlink" title="git citool"></a>git citool</h2><p>git citool是Git提交的图形化替代。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git citool</span><br></pre></td></tr></table></figure>
<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>重命名git文件。接受两个参数，源文件名和目标文件名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git mv &lt;old-file-name&gt; &lt;new-file-name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><p>你可以使用git clean命令处理未跟踪的文件。可以使用此命令从工作目录中删除所有未跟踪的文件。如果要处理跟踪的文件，则需要使用git reset命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clean</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
